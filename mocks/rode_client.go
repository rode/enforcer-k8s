// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"context"
	"sync"

	"github.com/rode/rode/proto/v1alpha1"
	"github.com/rode/rode/protodeps/grafeas/proto/v1beta1/grafeas_go_proto"
	"google.golang.org/grpc"
	"google.golang.org/protobuf/types/known/emptypb"
)

type FakeRodeClient struct {
	BatchCreateOccurrencesStub        func(context.Context, *v1alpha1.BatchCreateOccurrencesRequest, ...grpc.CallOption) (*v1alpha1.BatchCreateOccurrencesResponse, error)
	batchCreateOccurrencesMutex       sync.RWMutex
	batchCreateOccurrencesArgsForCall []struct {
		arg1 context.Context
		arg2 *v1alpha1.BatchCreateOccurrencesRequest
		arg3 []grpc.CallOption
	}
	batchCreateOccurrencesReturns struct {
		result1 *v1alpha1.BatchCreateOccurrencesResponse
		result2 error
	}
	batchCreateOccurrencesReturnsOnCall map[int]struct {
		result1 *v1alpha1.BatchCreateOccurrencesResponse
		result2 error
	}
	CreateNoteStub        func(context.Context, *v1alpha1.CreateNoteRequest, ...grpc.CallOption) (*grafeas_go_proto.Note, error)
	createNoteMutex       sync.RWMutex
	createNoteArgsForCall []struct {
		arg1 context.Context
		arg2 *v1alpha1.CreateNoteRequest
		arg3 []grpc.CallOption
	}
	createNoteReturns struct {
		result1 *grafeas_go_proto.Note
		result2 error
	}
	createNoteReturnsOnCall map[int]struct {
		result1 *grafeas_go_proto.Note
		result2 error
	}
	CreatePolicyStub        func(context.Context, *v1alpha1.Policy, ...grpc.CallOption) (*v1alpha1.Policy, error)
	createPolicyMutex       sync.RWMutex
	createPolicyArgsForCall []struct {
		arg1 context.Context
		arg2 *v1alpha1.Policy
		arg3 []grpc.CallOption
	}
	createPolicyReturns struct {
		result1 *v1alpha1.Policy
		result2 error
	}
	createPolicyReturnsOnCall map[int]struct {
		result1 *v1alpha1.Policy
		result2 error
	}
	CreatePolicyAssignmentStub        func(context.Context, *v1alpha1.PolicyAssignment, ...grpc.CallOption) (*v1alpha1.PolicyAssignment, error)
	createPolicyAssignmentMutex       sync.RWMutex
	createPolicyAssignmentArgsForCall []struct {
		arg1 context.Context
		arg2 *v1alpha1.PolicyAssignment
		arg3 []grpc.CallOption
	}
	createPolicyAssignmentReturns struct {
		result1 *v1alpha1.PolicyAssignment
		result2 error
	}
	createPolicyAssignmentReturnsOnCall map[int]struct {
		result1 *v1alpha1.PolicyAssignment
		result2 error
	}
	CreatePolicyGroupStub        func(context.Context, *v1alpha1.PolicyGroup, ...grpc.CallOption) (*v1alpha1.PolicyGroup, error)
	createPolicyGroupMutex       sync.RWMutex
	createPolicyGroupArgsForCall []struct {
		arg1 context.Context
		arg2 *v1alpha1.PolicyGroup
		arg3 []grpc.CallOption
	}
	createPolicyGroupReturns struct {
		result1 *v1alpha1.PolicyGroup
		result2 error
	}
	createPolicyGroupReturnsOnCall map[int]struct {
		result1 *v1alpha1.PolicyGroup
		result2 error
	}
	DeletePolicyStub        func(context.Context, *v1alpha1.DeletePolicyRequest, ...grpc.CallOption) (*emptypb.Empty, error)
	deletePolicyMutex       sync.RWMutex
	deletePolicyArgsForCall []struct {
		arg1 context.Context
		arg2 *v1alpha1.DeletePolicyRequest
		arg3 []grpc.CallOption
	}
	deletePolicyReturns struct {
		result1 *emptypb.Empty
		result2 error
	}
	deletePolicyReturnsOnCall map[int]struct {
		result1 *emptypb.Empty
		result2 error
	}
	DeletePolicyAssignmentStub        func(context.Context, *v1alpha1.DeletePolicyAssignmentRequest, ...grpc.CallOption) (*emptypb.Empty, error)
	deletePolicyAssignmentMutex       sync.RWMutex
	deletePolicyAssignmentArgsForCall []struct {
		arg1 context.Context
		arg2 *v1alpha1.DeletePolicyAssignmentRequest
		arg3 []grpc.CallOption
	}
	deletePolicyAssignmentReturns struct {
		result1 *emptypb.Empty
		result2 error
	}
	deletePolicyAssignmentReturnsOnCall map[int]struct {
		result1 *emptypb.Empty
		result2 error
	}
	DeletePolicyGroupStub        func(context.Context, *v1alpha1.DeletePolicyGroupRequest, ...grpc.CallOption) (*emptypb.Empty, error)
	deletePolicyGroupMutex       sync.RWMutex
	deletePolicyGroupArgsForCall []struct {
		arg1 context.Context
		arg2 *v1alpha1.DeletePolicyGroupRequest
		arg3 []grpc.CallOption
	}
	deletePolicyGroupReturns struct {
		result1 *emptypb.Empty
		result2 error
	}
	deletePolicyGroupReturnsOnCall map[int]struct {
		result1 *emptypb.Empty
		result2 error
	}
	EvaluatePolicyStub        func(context.Context, *v1alpha1.EvaluatePolicyRequest, ...grpc.CallOption) (*v1alpha1.EvaluatePolicyResponse, error)
	evaluatePolicyMutex       sync.RWMutex
	evaluatePolicyArgsForCall []struct {
		arg1 context.Context
		arg2 *v1alpha1.EvaluatePolicyRequest
		arg3 []grpc.CallOption
	}
	evaluatePolicyReturns struct {
		result1 *v1alpha1.EvaluatePolicyResponse
		result2 error
	}
	evaluatePolicyReturnsOnCall map[int]struct {
		result1 *v1alpha1.EvaluatePolicyResponse
		result2 error
	}
	EvaluateResourceStub        func(context.Context, *v1alpha1.ResourceEvaluationRequest, ...grpc.CallOption) (*v1alpha1.ResourceEvaluationResult, error)
	evaluateResourceMutex       sync.RWMutex
	evaluateResourceArgsForCall []struct {
		arg1 context.Context
		arg2 *v1alpha1.ResourceEvaluationRequest
		arg3 []grpc.CallOption
	}
	evaluateResourceReturns struct {
		result1 *v1alpha1.ResourceEvaluationResult
		result2 error
	}
	evaluateResourceReturnsOnCall map[int]struct {
		result1 *v1alpha1.ResourceEvaluationResult
		result2 error
	}
	GetPolicyStub        func(context.Context, *v1alpha1.GetPolicyRequest, ...grpc.CallOption) (*v1alpha1.Policy, error)
	getPolicyMutex       sync.RWMutex
	getPolicyArgsForCall []struct {
		arg1 context.Context
		arg2 *v1alpha1.GetPolicyRequest
		arg3 []grpc.CallOption
	}
	getPolicyReturns struct {
		result1 *v1alpha1.Policy
		result2 error
	}
	getPolicyReturnsOnCall map[int]struct {
		result1 *v1alpha1.Policy
		result2 error
	}
	GetPolicyAssignmentStub        func(context.Context, *v1alpha1.GetPolicyAssignmentRequest, ...grpc.CallOption) (*v1alpha1.PolicyAssignment, error)
	getPolicyAssignmentMutex       sync.RWMutex
	getPolicyAssignmentArgsForCall []struct {
		arg1 context.Context
		arg2 *v1alpha1.GetPolicyAssignmentRequest
		arg3 []grpc.CallOption
	}
	getPolicyAssignmentReturns struct {
		result1 *v1alpha1.PolicyAssignment
		result2 error
	}
	getPolicyAssignmentReturnsOnCall map[int]struct {
		result1 *v1alpha1.PolicyAssignment
		result2 error
	}
	GetPolicyGroupStub        func(context.Context, *v1alpha1.GetPolicyGroupRequest, ...grpc.CallOption) (*v1alpha1.PolicyGroup, error)
	getPolicyGroupMutex       sync.RWMutex
	getPolicyGroupArgsForCall []struct {
		arg1 context.Context
		arg2 *v1alpha1.GetPolicyGroupRequest
		arg3 []grpc.CallOption
	}
	getPolicyGroupReturns struct {
		result1 *v1alpha1.PolicyGroup
		result2 error
	}
	getPolicyGroupReturnsOnCall map[int]struct {
		result1 *v1alpha1.PolicyGroup
		result2 error
	}
	GetResourceEvaluationStub        func(context.Context, *v1alpha1.GetResourceEvaluationRequest, ...grpc.CallOption) (*v1alpha1.ResourceEvaluationResult, error)
	getResourceEvaluationMutex       sync.RWMutex
	getResourceEvaluationArgsForCall []struct {
		arg1 context.Context
		arg2 *v1alpha1.GetResourceEvaluationRequest
		arg3 []grpc.CallOption
	}
	getResourceEvaluationReturns struct {
		result1 *v1alpha1.ResourceEvaluationResult
		result2 error
	}
	getResourceEvaluationReturnsOnCall map[int]struct {
		result1 *v1alpha1.ResourceEvaluationResult
		result2 error
	}
	ListOccurrencesStub        func(context.Context, *v1alpha1.ListOccurrencesRequest, ...grpc.CallOption) (*v1alpha1.ListOccurrencesResponse, error)
	listOccurrencesMutex       sync.RWMutex
	listOccurrencesArgsForCall []struct {
		arg1 context.Context
		arg2 *v1alpha1.ListOccurrencesRequest
		arg3 []grpc.CallOption
	}
	listOccurrencesReturns struct {
		result1 *v1alpha1.ListOccurrencesResponse
		result2 error
	}
	listOccurrencesReturnsOnCall map[int]struct {
		result1 *v1alpha1.ListOccurrencesResponse
		result2 error
	}
	ListPoliciesStub        func(context.Context, *v1alpha1.ListPoliciesRequest, ...grpc.CallOption) (*v1alpha1.ListPoliciesResponse, error)
	listPoliciesMutex       sync.RWMutex
	listPoliciesArgsForCall []struct {
		arg1 context.Context
		arg2 *v1alpha1.ListPoliciesRequest
		arg3 []grpc.CallOption
	}
	listPoliciesReturns struct {
		result1 *v1alpha1.ListPoliciesResponse
		result2 error
	}
	listPoliciesReturnsOnCall map[int]struct {
		result1 *v1alpha1.ListPoliciesResponse
		result2 error
	}
	ListPolicyAssignmentsStub        func(context.Context, *v1alpha1.ListPolicyAssignmentsRequest, ...grpc.CallOption) (*v1alpha1.ListPolicyAssignmentsResponse, error)
	listPolicyAssignmentsMutex       sync.RWMutex
	listPolicyAssignmentsArgsForCall []struct {
		arg1 context.Context
		arg2 *v1alpha1.ListPolicyAssignmentsRequest
		arg3 []grpc.CallOption
	}
	listPolicyAssignmentsReturns struct {
		result1 *v1alpha1.ListPolicyAssignmentsResponse
		result2 error
	}
	listPolicyAssignmentsReturnsOnCall map[int]struct {
		result1 *v1alpha1.ListPolicyAssignmentsResponse
		result2 error
	}
	ListPolicyGroupsStub        func(context.Context, *v1alpha1.ListPolicyGroupsRequest, ...grpc.CallOption) (*v1alpha1.ListPolicyGroupsResponse, error)
	listPolicyGroupsMutex       sync.RWMutex
	listPolicyGroupsArgsForCall []struct {
		arg1 context.Context
		arg2 *v1alpha1.ListPolicyGroupsRequest
		arg3 []grpc.CallOption
	}
	listPolicyGroupsReturns struct {
		result1 *v1alpha1.ListPolicyGroupsResponse
		result2 error
	}
	listPolicyGroupsReturnsOnCall map[int]struct {
		result1 *v1alpha1.ListPolicyGroupsResponse
		result2 error
	}
	ListPolicyVersionsStub        func(context.Context, *v1alpha1.ListPolicyVersionsRequest, ...grpc.CallOption) (*v1alpha1.ListPolicyVersionsResponse, error)
	listPolicyVersionsMutex       sync.RWMutex
	listPolicyVersionsArgsForCall []struct {
		arg1 context.Context
		arg2 *v1alpha1.ListPolicyVersionsRequest
		arg3 []grpc.CallOption
	}
	listPolicyVersionsReturns struct {
		result1 *v1alpha1.ListPolicyVersionsResponse
		result2 error
	}
	listPolicyVersionsReturnsOnCall map[int]struct {
		result1 *v1alpha1.ListPolicyVersionsResponse
		result2 error
	}
	ListResourceEvaluationsStub        func(context.Context, *v1alpha1.ListResourceEvaluationsRequest, ...grpc.CallOption) (*v1alpha1.ListResourceEvaluationsResponse, error)
	listResourceEvaluationsMutex       sync.RWMutex
	listResourceEvaluationsArgsForCall []struct {
		arg1 context.Context
		arg2 *v1alpha1.ListResourceEvaluationsRequest
		arg3 []grpc.CallOption
	}
	listResourceEvaluationsReturns struct {
		result1 *v1alpha1.ListResourceEvaluationsResponse
		result2 error
	}
	listResourceEvaluationsReturnsOnCall map[int]struct {
		result1 *v1alpha1.ListResourceEvaluationsResponse
		result2 error
	}
	ListResourceVersionsStub        func(context.Context, *v1alpha1.ListResourceVersionsRequest, ...grpc.CallOption) (*v1alpha1.ListResourceVersionsResponse, error)
	listResourceVersionsMutex       sync.RWMutex
	listResourceVersionsArgsForCall []struct {
		arg1 context.Context
		arg2 *v1alpha1.ListResourceVersionsRequest
		arg3 []grpc.CallOption
	}
	listResourceVersionsReturns struct {
		result1 *v1alpha1.ListResourceVersionsResponse
		result2 error
	}
	listResourceVersionsReturnsOnCall map[int]struct {
		result1 *v1alpha1.ListResourceVersionsResponse
		result2 error
	}
	ListResourcesStub        func(context.Context, *v1alpha1.ListResourcesRequest, ...grpc.CallOption) (*v1alpha1.ListResourcesResponse, error)
	listResourcesMutex       sync.RWMutex
	listResourcesArgsForCall []struct {
		arg1 context.Context
		arg2 *v1alpha1.ListResourcesRequest
		arg3 []grpc.CallOption
	}
	listResourcesReturns struct {
		result1 *v1alpha1.ListResourcesResponse
		result2 error
	}
	listResourcesReturnsOnCall map[int]struct {
		result1 *v1alpha1.ListResourcesResponse
		result2 error
	}
	ListVersionedResourceOccurrencesStub        func(context.Context, *v1alpha1.ListVersionedResourceOccurrencesRequest, ...grpc.CallOption) (*v1alpha1.ListVersionedResourceOccurrencesResponse, error)
	listVersionedResourceOccurrencesMutex       sync.RWMutex
	listVersionedResourceOccurrencesArgsForCall []struct {
		arg1 context.Context
		arg2 *v1alpha1.ListVersionedResourceOccurrencesRequest
		arg3 []grpc.CallOption
	}
	listVersionedResourceOccurrencesReturns struct {
		result1 *v1alpha1.ListVersionedResourceOccurrencesResponse
		result2 error
	}
	listVersionedResourceOccurrencesReturnsOnCall map[int]struct {
		result1 *v1alpha1.ListVersionedResourceOccurrencesResponse
		result2 error
	}
	RegisterCollectorStub        func(context.Context, *v1alpha1.RegisterCollectorRequest, ...grpc.CallOption) (*v1alpha1.RegisterCollectorResponse, error)
	registerCollectorMutex       sync.RWMutex
	registerCollectorArgsForCall []struct {
		arg1 context.Context
		arg2 *v1alpha1.RegisterCollectorRequest
		arg3 []grpc.CallOption
	}
	registerCollectorReturns struct {
		result1 *v1alpha1.RegisterCollectorResponse
		result2 error
	}
	registerCollectorReturnsOnCall map[int]struct {
		result1 *v1alpha1.RegisterCollectorResponse
		result2 error
	}
	UpdateOccurrenceStub        func(context.Context, *v1alpha1.UpdateOccurrenceRequest, ...grpc.CallOption) (*grafeas_go_proto.Occurrence, error)
	updateOccurrenceMutex       sync.RWMutex
	updateOccurrenceArgsForCall []struct {
		arg1 context.Context
		arg2 *v1alpha1.UpdateOccurrenceRequest
		arg3 []grpc.CallOption
	}
	updateOccurrenceReturns struct {
		result1 *grafeas_go_proto.Occurrence
		result2 error
	}
	updateOccurrenceReturnsOnCall map[int]struct {
		result1 *grafeas_go_proto.Occurrence
		result2 error
	}
	UpdatePolicyStub        func(context.Context, *v1alpha1.UpdatePolicyRequest, ...grpc.CallOption) (*v1alpha1.Policy, error)
	updatePolicyMutex       sync.RWMutex
	updatePolicyArgsForCall []struct {
		arg1 context.Context
		arg2 *v1alpha1.UpdatePolicyRequest
		arg3 []grpc.CallOption
	}
	updatePolicyReturns struct {
		result1 *v1alpha1.Policy
		result2 error
	}
	updatePolicyReturnsOnCall map[int]struct {
		result1 *v1alpha1.Policy
		result2 error
	}
	UpdatePolicyAssignmentStub        func(context.Context, *v1alpha1.PolicyAssignment, ...grpc.CallOption) (*v1alpha1.PolicyAssignment, error)
	updatePolicyAssignmentMutex       sync.RWMutex
	updatePolicyAssignmentArgsForCall []struct {
		arg1 context.Context
		arg2 *v1alpha1.PolicyAssignment
		arg3 []grpc.CallOption
	}
	updatePolicyAssignmentReturns struct {
		result1 *v1alpha1.PolicyAssignment
		result2 error
	}
	updatePolicyAssignmentReturnsOnCall map[int]struct {
		result1 *v1alpha1.PolicyAssignment
		result2 error
	}
	UpdatePolicyGroupStub        func(context.Context, *v1alpha1.PolicyGroup, ...grpc.CallOption) (*v1alpha1.PolicyGroup, error)
	updatePolicyGroupMutex       sync.RWMutex
	updatePolicyGroupArgsForCall []struct {
		arg1 context.Context
		arg2 *v1alpha1.PolicyGroup
		arg3 []grpc.CallOption
	}
	updatePolicyGroupReturns struct {
		result1 *v1alpha1.PolicyGroup
		result2 error
	}
	updatePolicyGroupReturnsOnCall map[int]struct {
		result1 *v1alpha1.PolicyGroup
		result2 error
	}
	ValidatePolicyStub        func(context.Context, *v1alpha1.ValidatePolicyRequest, ...grpc.CallOption) (*v1alpha1.ValidatePolicyResponse, error)
	validatePolicyMutex       sync.RWMutex
	validatePolicyArgsForCall []struct {
		arg1 context.Context
		arg2 *v1alpha1.ValidatePolicyRequest
		arg3 []grpc.CallOption
	}
	validatePolicyReturns struct {
		result1 *v1alpha1.ValidatePolicyResponse
		result2 error
	}
	validatePolicyReturnsOnCall map[int]struct {
		result1 *v1alpha1.ValidatePolicyResponse
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRodeClient) BatchCreateOccurrences(arg1 context.Context, arg2 *v1alpha1.BatchCreateOccurrencesRequest, arg3 ...grpc.CallOption) (*v1alpha1.BatchCreateOccurrencesResponse, error) {
	fake.batchCreateOccurrencesMutex.Lock()
	ret, specificReturn := fake.batchCreateOccurrencesReturnsOnCall[len(fake.batchCreateOccurrencesArgsForCall)]
	fake.batchCreateOccurrencesArgsForCall = append(fake.batchCreateOccurrencesArgsForCall, struct {
		arg1 context.Context
		arg2 *v1alpha1.BatchCreateOccurrencesRequest
		arg3 []grpc.CallOption
	}{arg1, arg2, arg3})
	stub := fake.BatchCreateOccurrencesStub
	fakeReturns := fake.batchCreateOccurrencesReturns
	fake.recordInvocation("BatchCreateOccurrences", []interface{}{arg1, arg2, arg3})
	fake.batchCreateOccurrencesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRodeClient) BatchCreateOccurrencesCallCount() int {
	fake.batchCreateOccurrencesMutex.RLock()
	defer fake.batchCreateOccurrencesMutex.RUnlock()
	return len(fake.batchCreateOccurrencesArgsForCall)
}

func (fake *FakeRodeClient) BatchCreateOccurrencesCalls(stub func(context.Context, *v1alpha1.BatchCreateOccurrencesRequest, ...grpc.CallOption) (*v1alpha1.BatchCreateOccurrencesResponse, error)) {
	fake.batchCreateOccurrencesMutex.Lock()
	defer fake.batchCreateOccurrencesMutex.Unlock()
	fake.BatchCreateOccurrencesStub = stub
}

func (fake *FakeRodeClient) BatchCreateOccurrencesArgsForCall(i int) (context.Context, *v1alpha1.BatchCreateOccurrencesRequest, []grpc.CallOption) {
	fake.batchCreateOccurrencesMutex.RLock()
	defer fake.batchCreateOccurrencesMutex.RUnlock()
	argsForCall := fake.batchCreateOccurrencesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRodeClient) BatchCreateOccurrencesReturns(result1 *v1alpha1.BatchCreateOccurrencesResponse, result2 error) {
	fake.batchCreateOccurrencesMutex.Lock()
	defer fake.batchCreateOccurrencesMutex.Unlock()
	fake.BatchCreateOccurrencesStub = nil
	fake.batchCreateOccurrencesReturns = struct {
		result1 *v1alpha1.BatchCreateOccurrencesResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeRodeClient) BatchCreateOccurrencesReturnsOnCall(i int, result1 *v1alpha1.BatchCreateOccurrencesResponse, result2 error) {
	fake.batchCreateOccurrencesMutex.Lock()
	defer fake.batchCreateOccurrencesMutex.Unlock()
	fake.BatchCreateOccurrencesStub = nil
	if fake.batchCreateOccurrencesReturnsOnCall == nil {
		fake.batchCreateOccurrencesReturnsOnCall = make(map[int]struct {
			result1 *v1alpha1.BatchCreateOccurrencesResponse
			result2 error
		})
	}
	fake.batchCreateOccurrencesReturnsOnCall[i] = struct {
		result1 *v1alpha1.BatchCreateOccurrencesResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeRodeClient) CreateNote(arg1 context.Context, arg2 *v1alpha1.CreateNoteRequest, arg3 ...grpc.CallOption) (*grafeas_go_proto.Note, error) {
	fake.createNoteMutex.Lock()
	ret, specificReturn := fake.createNoteReturnsOnCall[len(fake.createNoteArgsForCall)]
	fake.createNoteArgsForCall = append(fake.createNoteArgsForCall, struct {
		arg1 context.Context
		arg2 *v1alpha1.CreateNoteRequest
		arg3 []grpc.CallOption
	}{arg1, arg2, arg3})
	stub := fake.CreateNoteStub
	fakeReturns := fake.createNoteReturns
	fake.recordInvocation("CreateNote", []interface{}{arg1, arg2, arg3})
	fake.createNoteMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRodeClient) CreateNoteCallCount() int {
	fake.createNoteMutex.RLock()
	defer fake.createNoteMutex.RUnlock()
	return len(fake.createNoteArgsForCall)
}

func (fake *FakeRodeClient) CreateNoteCalls(stub func(context.Context, *v1alpha1.CreateNoteRequest, ...grpc.CallOption) (*grafeas_go_proto.Note, error)) {
	fake.createNoteMutex.Lock()
	defer fake.createNoteMutex.Unlock()
	fake.CreateNoteStub = stub
}

func (fake *FakeRodeClient) CreateNoteArgsForCall(i int) (context.Context, *v1alpha1.CreateNoteRequest, []grpc.CallOption) {
	fake.createNoteMutex.RLock()
	defer fake.createNoteMutex.RUnlock()
	argsForCall := fake.createNoteArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRodeClient) CreateNoteReturns(result1 *grafeas_go_proto.Note, result2 error) {
	fake.createNoteMutex.Lock()
	defer fake.createNoteMutex.Unlock()
	fake.CreateNoteStub = nil
	fake.createNoteReturns = struct {
		result1 *grafeas_go_proto.Note
		result2 error
	}{result1, result2}
}

func (fake *FakeRodeClient) CreateNoteReturnsOnCall(i int, result1 *grafeas_go_proto.Note, result2 error) {
	fake.createNoteMutex.Lock()
	defer fake.createNoteMutex.Unlock()
	fake.CreateNoteStub = nil
	if fake.createNoteReturnsOnCall == nil {
		fake.createNoteReturnsOnCall = make(map[int]struct {
			result1 *grafeas_go_proto.Note
			result2 error
		})
	}
	fake.createNoteReturnsOnCall[i] = struct {
		result1 *grafeas_go_proto.Note
		result2 error
	}{result1, result2}
}

func (fake *FakeRodeClient) CreatePolicy(arg1 context.Context, arg2 *v1alpha1.Policy, arg3 ...grpc.CallOption) (*v1alpha1.Policy, error) {
	fake.createPolicyMutex.Lock()
	ret, specificReturn := fake.createPolicyReturnsOnCall[len(fake.createPolicyArgsForCall)]
	fake.createPolicyArgsForCall = append(fake.createPolicyArgsForCall, struct {
		arg1 context.Context
		arg2 *v1alpha1.Policy
		arg3 []grpc.CallOption
	}{arg1, arg2, arg3})
	stub := fake.CreatePolicyStub
	fakeReturns := fake.createPolicyReturns
	fake.recordInvocation("CreatePolicy", []interface{}{arg1, arg2, arg3})
	fake.createPolicyMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRodeClient) CreatePolicyCallCount() int {
	fake.createPolicyMutex.RLock()
	defer fake.createPolicyMutex.RUnlock()
	return len(fake.createPolicyArgsForCall)
}

func (fake *FakeRodeClient) CreatePolicyCalls(stub func(context.Context, *v1alpha1.Policy, ...grpc.CallOption) (*v1alpha1.Policy, error)) {
	fake.createPolicyMutex.Lock()
	defer fake.createPolicyMutex.Unlock()
	fake.CreatePolicyStub = stub
}

func (fake *FakeRodeClient) CreatePolicyArgsForCall(i int) (context.Context, *v1alpha1.Policy, []grpc.CallOption) {
	fake.createPolicyMutex.RLock()
	defer fake.createPolicyMutex.RUnlock()
	argsForCall := fake.createPolicyArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRodeClient) CreatePolicyReturns(result1 *v1alpha1.Policy, result2 error) {
	fake.createPolicyMutex.Lock()
	defer fake.createPolicyMutex.Unlock()
	fake.CreatePolicyStub = nil
	fake.createPolicyReturns = struct {
		result1 *v1alpha1.Policy
		result2 error
	}{result1, result2}
}

func (fake *FakeRodeClient) CreatePolicyReturnsOnCall(i int, result1 *v1alpha1.Policy, result2 error) {
	fake.createPolicyMutex.Lock()
	defer fake.createPolicyMutex.Unlock()
	fake.CreatePolicyStub = nil
	if fake.createPolicyReturnsOnCall == nil {
		fake.createPolicyReturnsOnCall = make(map[int]struct {
			result1 *v1alpha1.Policy
			result2 error
		})
	}
	fake.createPolicyReturnsOnCall[i] = struct {
		result1 *v1alpha1.Policy
		result2 error
	}{result1, result2}
}

func (fake *FakeRodeClient) CreatePolicyAssignment(arg1 context.Context, arg2 *v1alpha1.PolicyAssignment, arg3 ...grpc.CallOption) (*v1alpha1.PolicyAssignment, error) {
	fake.createPolicyAssignmentMutex.Lock()
	ret, specificReturn := fake.createPolicyAssignmentReturnsOnCall[len(fake.createPolicyAssignmentArgsForCall)]
	fake.createPolicyAssignmentArgsForCall = append(fake.createPolicyAssignmentArgsForCall, struct {
		arg1 context.Context
		arg2 *v1alpha1.PolicyAssignment
		arg3 []grpc.CallOption
	}{arg1, arg2, arg3})
	stub := fake.CreatePolicyAssignmentStub
	fakeReturns := fake.createPolicyAssignmentReturns
	fake.recordInvocation("CreatePolicyAssignment", []interface{}{arg1, arg2, arg3})
	fake.createPolicyAssignmentMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRodeClient) CreatePolicyAssignmentCallCount() int {
	fake.createPolicyAssignmentMutex.RLock()
	defer fake.createPolicyAssignmentMutex.RUnlock()
	return len(fake.createPolicyAssignmentArgsForCall)
}

func (fake *FakeRodeClient) CreatePolicyAssignmentCalls(stub func(context.Context, *v1alpha1.PolicyAssignment, ...grpc.CallOption) (*v1alpha1.PolicyAssignment, error)) {
	fake.createPolicyAssignmentMutex.Lock()
	defer fake.createPolicyAssignmentMutex.Unlock()
	fake.CreatePolicyAssignmentStub = stub
}

func (fake *FakeRodeClient) CreatePolicyAssignmentArgsForCall(i int) (context.Context, *v1alpha1.PolicyAssignment, []grpc.CallOption) {
	fake.createPolicyAssignmentMutex.RLock()
	defer fake.createPolicyAssignmentMutex.RUnlock()
	argsForCall := fake.createPolicyAssignmentArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRodeClient) CreatePolicyAssignmentReturns(result1 *v1alpha1.PolicyAssignment, result2 error) {
	fake.createPolicyAssignmentMutex.Lock()
	defer fake.createPolicyAssignmentMutex.Unlock()
	fake.CreatePolicyAssignmentStub = nil
	fake.createPolicyAssignmentReturns = struct {
		result1 *v1alpha1.PolicyAssignment
		result2 error
	}{result1, result2}
}

func (fake *FakeRodeClient) CreatePolicyAssignmentReturnsOnCall(i int, result1 *v1alpha1.PolicyAssignment, result2 error) {
	fake.createPolicyAssignmentMutex.Lock()
	defer fake.createPolicyAssignmentMutex.Unlock()
	fake.CreatePolicyAssignmentStub = nil
	if fake.createPolicyAssignmentReturnsOnCall == nil {
		fake.createPolicyAssignmentReturnsOnCall = make(map[int]struct {
			result1 *v1alpha1.PolicyAssignment
			result2 error
		})
	}
	fake.createPolicyAssignmentReturnsOnCall[i] = struct {
		result1 *v1alpha1.PolicyAssignment
		result2 error
	}{result1, result2}
}

func (fake *FakeRodeClient) CreatePolicyGroup(arg1 context.Context, arg2 *v1alpha1.PolicyGroup, arg3 ...grpc.CallOption) (*v1alpha1.PolicyGroup, error) {
	fake.createPolicyGroupMutex.Lock()
	ret, specificReturn := fake.createPolicyGroupReturnsOnCall[len(fake.createPolicyGroupArgsForCall)]
	fake.createPolicyGroupArgsForCall = append(fake.createPolicyGroupArgsForCall, struct {
		arg1 context.Context
		arg2 *v1alpha1.PolicyGroup
		arg3 []grpc.CallOption
	}{arg1, arg2, arg3})
	stub := fake.CreatePolicyGroupStub
	fakeReturns := fake.createPolicyGroupReturns
	fake.recordInvocation("CreatePolicyGroup", []interface{}{arg1, arg2, arg3})
	fake.createPolicyGroupMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRodeClient) CreatePolicyGroupCallCount() int {
	fake.createPolicyGroupMutex.RLock()
	defer fake.createPolicyGroupMutex.RUnlock()
	return len(fake.createPolicyGroupArgsForCall)
}

func (fake *FakeRodeClient) CreatePolicyGroupCalls(stub func(context.Context, *v1alpha1.PolicyGroup, ...grpc.CallOption) (*v1alpha1.PolicyGroup, error)) {
	fake.createPolicyGroupMutex.Lock()
	defer fake.createPolicyGroupMutex.Unlock()
	fake.CreatePolicyGroupStub = stub
}

func (fake *FakeRodeClient) CreatePolicyGroupArgsForCall(i int) (context.Context, *v1alpha1.PolicyGroup, []grpc.CallOption) {
	fake.createPolicyGroupMutex.RLock()
	defer fake.createPolicyGroupMutex.RUnlock()
	argsForCall := fake.createPolicyGroupArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRodeClient) CreatePolicyGroupReturns(result1 *v1alpha1.PolicyGroup, result2 error) {
	fake.createPolicyGroupMutex.Lock()
	defer fake.createPolicyGroupMutex.Unlock()
	fake.CreatePolicyGroupStub = nil
	fake.createPolicyGroupReturns = struct {
		result1 *v1alpha1.PolicyGroup
		result2 error
	}{result1, result2}
}

func (fake *FakeRodeClient) CreatePolicyGroupReturnsOnCall(i int, result1 *v1alpha1.PolicyGroup, result2 error) {
	fake.createPolicyGroupMutex.Lock()
	defer fake.createPolicyGroupMutex.Unlock()
	fake.CreatePolicyGroupStub = nil
	if fake.createPolicyGroupReturnsOnCall == nil {
		fake.createPolicyGroupReturnsOnCall = make(map[int]struct {
			result1 *v1alpha1.PolicyGroup
			result2 error
		})
	}
	fake.createPolicyGroupReturnsOnCall[i] = struct {
		result1 *v1alpha1.PolicyGroup
		result2 error
	}{result1, result2}
}

func (fake *FakeRodeClient) DeletePolicy(arg1 context.Context, arg2 *v1alpha1.DeletePolicyRequest, arg3 ...grpc.CallOption) (*emptypb.Empty, error) {
	fake.deletePolicyMutex.Lock()
	ret, specificReturn := fake.deletePolicyReturnsOnCall[len(fake.deletePolicyArgsForCall)]
	fake.deletePolicyArgsForCall = append(fake.deletePolicyArgsForCall, struct {
		arg1 context.Context
		arg2 *v1alpha1.DeletePolicyRequest
		arg3 []grpc.CallOption
	}{arg1, arg2, arg3})
	stub := fake.DeletePolicyStub
	fakeReturns := fake.deletePolicyReturns
	fake.recordInvocation("DeletePolicy", []interface{}{arg1, arg2, arg3})
	fake.deletePolicyMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRodeClient) DeletePolicyCallCount() int {
	fake.deletePolicyMutex.RLock()
	defer fake.deletePolicyMutex.RUnlock()
	return len(fake.deletePolicyArgsForCall)
}

func (fake *FakeRodeClient) DeletePolicyCalls(stub func(context.Context, *v1alpha1.DeletePolicyRequest, ...grpc.CallOption) (*emptypb.Empty, error)) {
	fake.deletePolicyMutex.Lock()
	defer fake.deletePolicyMutex.Unlock()
	fake.DeletePolicyStub = stub
}

func (fake *FakeRodeClient) DeletePolicyArgsForCall(i int) (context.Context, *v1alpha1.DeletePolicyRequest, []grpc.CallOption) {
	fake.deletePolicyMutex.RLock()
	defer fake.deletePolicyMutex.RUnlock()
	argsForCall := fake.deletePolicyArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRodeClient) DeletePolicyReturns(result1 *emptypb.Empty, result2 error) {
	fake.deletePolicyMutex.Lock()
	defer fake.deletePolicyMutex.Unlock()
	fake.DeletePolicyStub = nil
	fake.deletePolicyReturns = struct {
		result1 *emptypb.Empty
		result2 error
	}{result1, result2}
}

func (fake *FakeRodeClient) DeletePolicyReturnsOnCall(i int, result1 *emptypb.Empty, result2 error) {
	fake.deletePolicyMutex.Lock()
	defer fake.deletePolicyMutex.Unlock()
	fake.DeletePolicyStub = nil
	if fake.deletePolicyReturnsOnCall == nil {
		fake.deletePolicyReturnsOnCall = make(map[int]struct {
			result1 *emptypb.Empty
			result2 error
		})
	}
	fake.deletePolicyReturnsOnCall[i] = struct {
		result1 *emptypb.Empty
		result2 error
	}{result1, result2}
}

func (fake *FakeRodeClient) DeletePolicyAssignment(arg1 context.Context, arg2 *v1alpha1.DeletePolicyAssignmentRequest, arg3 ...grpc.CallOption) (*emptypb.Empty, error) {
	fake.deletePolicyAssignmentMutex.Lock()
	ret, specificReturn := fake.deletePolicyAssignmentReturnsOnCall[len(fake.deletePolicyAssignmentArgsForCall)]
	fake.deletePolicyAssignmentArgsForCall = append(fake.deletePolicyAssignmentArgsForCall, struct {
		arg1 context.Context
		arg2 *v1alpha1.DeletePolicyAssignmentRequest
		arg3 []grpc.CallOption
	}{arg1, arg2, arg3})
	stub := fake.DeletePolicyAssignmentStub
	fakeReturns := fake.deletePolicyAssignmentReturns
	fake.recordInvocation("DeletePolicyAssignment", []interface{}{arg1, arg2, arg3})
	fake.deletePolicyAssignmentMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRodeClient) DeletePolicyAssignmentCallCount() int {
	fake.deletePolicyAssignmentMutex.RLock()
	defer fake.deletePolicyAssignmentMutex.RUnlock()
	return len(fake.deletePolicyAssignmentArgsForCall)
}

func (fake *FakeRodeClient) DeletePolicyAssignmentCalls(stub func(context.Context, *v1alpha1.DeletePolicyAssignmentRequest, ...grpc.CallOption) (*emptypb.Empty, error)) {
	fake.deletePolicyAssignmentMutex.Lock()
	defer fake.deletePolicyAssignmentMutex.Unlock()
	fake.DeletePolicyAssignmentStub = stub
}

func (fake *FakeRodeClient) DeletePolicyAssignmentArgsForCall(i int) (context.Context, *v1alpha1.DeletePolicyAssignmentRequest, []grpc.CallOption) {
	fake.deletePolicyAssignmentMutex.RLock()
	defer fake.deletePolicyAssignmentMutex.RUnlock()
	argsForCall := fake.deletePolicyAssignmentArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRodeClient) DeletePolicyAssignmentReturns(result1 *emptypb.Empty, result2 error) {
	fake.deletePolicyAssignmentMutex.Lock()
	defer fake.deletePolicyAssignmentMutex.Unlock()
	fake.DeletePolicyAssignmentStub = nil
	fake.deletePolicyAssignmentReturns = struct {
		result1 *emptypb.Empty
		result2 error
	}{result1, result2}
}

func (fake *FakeRodeClient) DeletePolicyAssignmentReturnsOnCall(i int, result1 *emptypb.Empty, result2 error) {
	fake.deletePolicyAssignmentMutex.Lock()
	defer fake.deletePolicyAssignmentMutex.Unlock()
	fake.DeletePolicyAssignmentStub = nil
	if fake.deletePolicyAssignmentReturnsOnCall == nil {
		fake.deletePolicyAssignmentReturnsOnCall = make(map[int]struct {
			result1 *emptypb.Empty
			result2 error
		})
	}
	fake.deletePolicyAssignmentReturnsOnCall[i] = struct {
		result1 *emptypb.Empty
		result2 error
	}{result1, result2}
}

func (fake *FakeRodeClient) DeletePolicyGroup(arg1 context.Context, arg2 *v1alpha1.DeletePolicyGroupRequest, arg3 ...grpc.CallOption) (*emptypb.Empty, error) {
	fake.deletePolicyGroupMutex.Lock()
	ret, specificReturn := fake.deletePolicyGroupReturnsOnCall[len(fake.deletePolicyGroupArgsForCall)]
	fake.deletePolicyGroupArgsForCall = append(fake.deletePolicyGroupArgsForCall, struct {
		arg1 context.Context
		arg2 *v1alpha1.DeletePolicyGroupRequest
		arg3 []grpc.CallOption
	}{arg1, arg2, arg3})
	stub := fake.DeletePolicyGroupStub
	fakeReturns := fake.deletePolicyGroupReturns
	fake.recordInvocation("DeletePolicyGroup", []interface{}{arg1, arg2, arg3})
	fake.deletePolicyGroupMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRodeClient) DeletePolicyGroupCallCount() int {
	fake.deletePolicyGroupMutex.RLock()
	defer fake.deletePolicyGroupMutex.RUnlock()
	return len(fake.deletePolicyGroupArgsForCall)
}

func (fake *FakeRodeClient) DeletePolicyGroupCalls(stub func(context.Context, *v1alpha1.DeletePolicyGroupRequest, ...grpc.CallOption) (*emptypb.Empty, error)) {
	fake.deletePolicyGroupMutex.Lock()
	defer fake.deletePolicyGroupMutex.Unlock()
	fake.DeletePolicyGroupStub = stub
}

func (fake *FakeRodeClient) DeletePolicyGroupArgsForCall(i int) (context.Context, *v1alpha1.DeletePolicyGroupRequest, []grpc.CallOption) {
	fake.deletePolicyGroupMutex.RLock()
	defer fake.deletePolicyGroupMutex.RUnlock()
	argsForCall := fake.deletePolicyGroupArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRodeClient) DeletePolicyGroupReturns(result1 *emptypb.Empty, result2 error) {
	fake.deletePolicyGroupMutex.Lock()
	defer fake.deletePolicyGroupMutex.Unlock()
	fake.DeletePolicyGroupStub = nil
	fake.deletePolicyGroupReturns = struct {
		result1 *emptypb.Empty
		result2 error
	}{result1, result2}
}

func (fake *FakeRodeClient) DeletePolicyGroupReturnsOnCall(i int, result1 *emptypb.Empty, result2 error) {
	fake.deletePolicyGroupMutex.Lock()
	defer fake.deletePolicyGroupMutex.Unlock()
	fake.DeletePolicyGroupStub = nil
	if fake.deletePolicyGroupReturnsOnCall == nil {
		fake.deletePolicyGroupReturnsOnCall = make(map[int]struct {
			result1 *emptypb.Empty
			result2 error
		})
	}
	fake.deletePolicyGroupReturnsOnCall[i] = struct {
		result1 *emptypb.Empty
		result2 error
	}{result1, result2}
}

func (fake *FakeRodeClient) EvaluatePolicy(arg1 context.Context, arg2 *v1alpha1.EvaluatePolicyRequest, arg3 ...grpc.CallOption) (*v1alpha1.EvaluatePolicyResponse, error) {
	fake.evaluatePolicyMutex.Lock()
	ret, specificReturn := fake.evaluatePolicyReturnsOnCall[len(fake.evaluatePolicyArgsForCall)]
	fake.evaluatePolicyArgsForCall = append(fake.evaluatePolicyArgsForCall, struct {
		arg1 context.Context
		arg2 *v1alpha1.EvaluatePolicyRequest
		arg3 []grpc.CallOption
	}{arg1, arg2, arg3})
	stub := fake.EvaluatePolicyStub
	fakeReturns := fake.evaluatePolicyReturns
	fake.recordInvocation("EvaluatePolicy", []interface{}{arg1, arg2, arg3})
	fake.evaluatePolicyMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRodeClient) EvaluatePolicyCallCount() int {
	fake.evaluatePolicyMutex.RLock()
	defer fake.evaluatePolicyMutex.RUnlock()
	return len(fake.evaluatePolicyArgsForCall)
}

func (fake *FakeRodeClient) EvaluatePolicyCalls(stub func(context.Context, *v1alpha1.EvaluatePolicyRequest, ...grpc.CallOption) (*v1alpha1.EvaluatePolicyResponse, error)) {
	fake.evaluatePolicyMutex.Lock()
	defer fake.evaluatePolicyMutex.Unlock()
	fake.EvaluatePolicyStub = stub
}

func (fake *FakeRodeClient) EvaluatePolicyArgsForCall(i int) (context.Context, *v1alpha1.EvaluatePolicyRequest, []grpc.CallOption) {
	fake.evaluatePolicyMutex.RLock()
	defer fake.evaluatePolicyMutex.RUnlock()
	argsForCall := fake.evaluatePolicyArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRodeClient) EvaluatePolicyReturns(result1 *v1alpha1.EvaluatePolicyResponse, result2 error) {
	fake.evaluatePolicyMutex.Lock()
	defer fake.evaluatePolicyMutex.Unlock()
	fake.EvaluatePolicyStub = nil
	fake.evaluatePolicyReturns = struct {
		result1 *v1alpha1.EvaluatePolicyResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeRodeClient) EvaluatePolicyReturnsOnCall(i int, result1 *v1alpha1.EvaluatePolicyResponse, result2 error) {
	fake.evaluatePolicyMutex.Lock()
	defer fake.evaluatePolicyMutex.Unlock()
	fake.EvaluatePolicyStub = nil
	if fake.evaluatePolicyReturnsOnCall == nil {
		fake.evaluatePolicyReturnsOnCall = make(map[int]struct {
			result1 *v1alpha1.EvaluatePolicyResponse
			result2 error
		})
	}
	fake.evaluatePolicyReturnsOnCall[i] = struct {
		result1 *v1alpha1.EvaluatePolicyResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeRodeClient) EvaluateResource(arg1 context.Context, arg2 *v1alpha1.ResourceEvaluationRequest, arg3 ...grpc.CallOption) (*v1alpha1.ResourceEvaluationResult, error) {
	fake.evaluateResourceMutex.Lock()
	ret, specificReturn := fake.evaluateResourceReturnsOnCall[len(fake.evaluateResourceArgsForCall)]
	fake.evaluateResourceArgsForCall = append(fake.evaluateResourceArgsForCall, struct {
		arg1 context.Context
		arg2 *v1alpha1.ResourceEvaluationRequest
		arg3 []grpc.CallOption
	}{arg1, arg2, arg3})
	stub := fake.EvaluateResourceStub
	fakeReturns := fake.evaluateResourceReturns
	fake.recordInvocation("EvaluateResource", []interface{}{arg1, arg2, arg3})
	fake.evaluateResourceMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRodeClient) EvaluateResourceCallCount() int {
	fake.evaluateResourceMutex.RLock()
	defer fake.evaluateResourceMutex.RUnlock()
	return len(fake.evaluateResourceArgsForCall)
}

func (fake *FakeRodeClient) EvaluateResourceCalls(stub func(context.Context, *v1alpha1.ResourceEvaluationRequest, ...grpc.CallOption) (*v1alpha1.ResourceEvaluationResult, error)) {
	fake.evaluateResourceMutex.Lock()
	defer fake.evaluateResourceMutex.Unlock()
	fake.EvaluateResourceStub = stub
}

func (fake *FakeRodeClient) EvaluateResourceArgsForCall(i int) (context.Context, *v1alpha1.ResourceEvaluationRequest, []grpc.CallOption) {
	fake.evaluateResourceMutex.RLock()
	defer fake.evaluateResourceMutex.RUnlock()
	argsForCall := fake.evaluateResourceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRodeClient) EvaluateResourceReturns(result1 *v1alpha1.ResourceEvaluationResult, result2 error) {
	fake.evaluateResourceMutex.Lock()
	defer fake.evaluateResourceMutex.Unlock()
	fake.EvaluateResourceStub = nil
	fake.evaluateResourceReturns = struct {
		result1 *v1alpha1.ResourceEvaluationResult
		result2 error
	}{result1, result2}
}

func (fake *FakeRodeClient) EvaluateResourceReturnsOnCall(i int, result1 *v1alpha1.ResourceEvaluationResult, result2 error) {
	fake.evaluateResourceMutex.Lock()
	defer fake.evaluateResourceMutex.Unlock()
	fake.EvaluateResourceStub = nil
	if fake.evaluateResourceReturnsOnCall == nil {
		fake.evaluateResourceReturnsOnCall = make(map[int]struct {
			result1 *v1alpha1.ResourceEvaluationResult
			result2 error
		})
	}
	fake.evaluateResourceReturnsOnCall[i] = struct {
		result1 *v1alpha1.ResourceEvaluationResult
		result2 error
	}{result1, result2}
}

func (fake *FakeRodeClient) GetPolicy(arg1 context.Context, arg2 *v1alpha1.GetPolicyRequest, arg3 ...grpc.CallOption) (*v1alpha1.Policy, error) {
	fake.getPolicyMutex.Lock()
	ret, specificReturn := fake.getPolicyReturnsOnCall[len(fake.getPolicyArgsForCall)]
	fake.getPolicyArgsForCall = append(fake.getPolicyArgsForCall, struct {
		arg1 context.Context
		arg2 *v1alpha1.GetPolicyRequest
		arg3 []grpc.CallOption
	}{arg1, arg2, arg3})
	stub := fake.GetPolicyStub
	fakeReturns := fake.getPolicyReturns
	fake.recordInvocation("GetPolicy", []interface{}{arg1, arg2, arg3})
	fake.getPolicyMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRodeClient) GetPolicyCallCount() int {
	fake.getPolicyMutex.RLock()
	defer fake.getPolicyMutex.RUnlock()
	return len(fake.getPolicyArgsForCall)
}

func (fake *FakeRodeClient) GetPolicyCalls(stub func(context.Context, *v1alpha1.GetPolicyRequest, ...grpc.CallOption) (*v1alpha1.Policy, error)) {
	fake.getPolicyMutex.Lock()
	defer fake.getPolicyMutex.Unlock()
	fake.GetPolicyStub = stub
}

func (fake *FakeRodeClient) GetPolicyArgsForCall(i int) (context.Context, *v1alpha1.GetPolicyRequest, []grpc.CallOption) {
	fake.getPolicyMutex.RLock()
	defer fake.getPolicyMutex.RUnlock()
	argsForCall := fake.getPolicyArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRodeClient) GetPolicyReturns(result1 *v1alpha1.Policy, result2 error) {
	fake.getPolicyMutex.Lock()
	defer fake.getPolicyMutex.Unlock()
	fake.GetPolicyStub = nil
	fake.getPolicyReturns = struct {
		result1 *v1alpha1.Policy
		result2 error
	}{result1, result2}
}

func (fake *FakeRodeClient) GetPolicyReturnsOnCall(i int, result1 *v1alpha1.Policy, result2 error) {
	fake.getPolicyMutex.Lock()
	defer fake.getPolicyMutex.Unlock()
	fake.GetPolicyStub = nil
	if fake.getPolicyReturnsOnCall == nil {
		fake.getPolicyReturnsOnCall = make(map[int]struct {
			result1 *v1alpha1.Policy
			result2 error
		})
	}
	fake.getPolicyReturnsOnCall[i] = struct {
		result1 *v1alpha1.Policy
		result2 error
	}{result1, result2}
}

func (fake *FakeRodeClient) GetPolicyAssignment(arg1 context.Context, arg2 *v1alpha1.GetPolicyAssignmentRequest, arg3 ...grpc.CallOption) (*v1alpha1.PolicyAssignment, error) {
	fake.getPolicyAssignmentMutex.Lock()
	ret, specificReturn := fake.getPolicyAssignmentReturnsOnCall[len(fake.getPolicyAssignmentArgsForCall)]
	fake.getPolicyAssignmentArgsForCall = append(fake.getPolicyAssignmentArgsForCall, struct {
		arg1 context.Context
		arg2 *v1alpha1.GetPolicyAssignmentRequest
		arg3 []grpc.CallOption
	}{arg1, arg2, arg3})
	stub := fake.GetPolicyAssignmentStub
	fakeReturns := fake.getPolicyAssignmentReturns
	fake.recordInvocation("GetPolicyAssignment", []interface{}{arg1, arg2, arg3})
	fake.getPolicyAssignmentMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRodeClient) GetPolicyAssignmentCallCount() int {
	fake.getPolicyAssignmentMutex.RLock()
	defer fake.getPolicyAssignmentMutex.RUnlock()
	return len(fake.getPolicyAssignmentArgsForCall)
}

func (fake *FakeRodeClient) GetPolicyAssignmentCalls(stub func(context.Context, *v1alpha1.GetPolicyAssignmentRequest, ...grpc.CallOption) (*v1alpha1.PolicyAssignment, error)) {
	fake.getPolicyAssignmentMutex.Lock()
	defer fake.getPolicyAssignmentMutex.Unlock()
	fake.GetPolicyAssignmentStub = stub
}

func (fake *FakeRodeClient) GetPolicyAssignmentArgsForCall(i int) (context.Context, *v1alpha1.GetPolicyAssignmentRequest, []grpc.CallOption) {
	fake.getPolicyAssignmentMutex.RLock()
	defer fake.getPolicyAssignmentMutex.RUnlock()
	argsForCall := fake.getPolicyAssignmentArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRodeClient) GetPolicyAssignmentReturns(result1 *v1alpha1.PolicyAssignment, result2 error) {
	fake.getPolicyAssignmentMutex.Lock()
	defer fake.getPolicyAssignmentMutex.Unlock()
	fake.GetPolicyAssignmentStub = nil
	fake.getPolicyAssignmentReturns = struct {
		result1 *v1alpha1.PolicyAssignment
		result2 error
	}{result1, result2}
}

func (fake *FakeRodeClient) GetPolicyAssignmentReturnsOnCall(i int, result1 *v1alpha1.PolicyAssignment, result2 error) {
	fake.getPolicyAssignmentMutex.Lock()
	defer fake.getPolicyAssignmentMutex.Unlock()
	fake.GetPolicyAssignmentStub = nil
	if fake.getPolicyAssignmentReturnsOnCall == nil {
		fake.getPolicyAssignmentReturnsOnCall = make(map[int]struct {
			result1 *v1alpha1.PolicyAssignment
			result2 error
		})
	}
	fake.getPolicyAssignmentReturnsOnCall[i] = struct {
		result1 *v1alpha1.PolicyAssignment
		result2 error
	}{result1, result2}
}

func (fake *FakeRodeClient) GetPolicyGroup(arg1 context.Context, arg2 *v1alpha1.GetPolicyGroupRequest, arg3 ...grpc.CallOption) (*v1alpha1.PolicyGroup, error) {
	fake.getPolicyGroupMutex.Lock()
	ret, specificReturn := fake.getPolicyGroupReturnsOnCall[len(fake.getPolicyGroupArgsForCall)]
	fake.getPolicyGroupArgsForCall = append(fake.getPolicyGroupArgsForCall, struct {
		arg1 context.Context
		arg2 *v1alpha1.GetPolicyGroupRequest
		arg3 []grpc.CallOption
	}{arg1, arg2, arg3})
	stub := fake.GetPolicyGroupStub
	fakeReturns := fake.getPolicyGroupReturns
	fake.recordInvocation("GetPolicyGroup", []interface{}{arg1, arg2, arg3})
	fake.getPolicyGroupMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRodeClient) GetPolicyGroupCallCount() int {
	fake.getPolicyGroupMutex.RLock()
	defer fake.getPolicyGroupMutex.RUnlock()
	return len(fake.getPolicyGroupArgsForCall)
}

func (fake *FakeRodeClient) GetPolicyGroupCalls(stub func(context.Context, *v1alpha1.GetPolicyGroupRequest, ...grpc.CallOption) (*v1alpha1.PolicyGroup, error)) {
	fake.getPolicyGroupMutex.Lock()
	defer fake.getPolicyGroupMutex.Unlock()
	fake.GetPolicyGroupStub = stub
}

func (fake *FakeRodeClient) GetPolicyGroupArgsForCall(i int) (context.Context, *v1alpha1.GetPolicyGroupRequest, []grpc.CallOption) {
	fake.getPolicyGroupMutex.RLock()
	defer fake.getPolicyGroupMutex.RUnlock()
	argsForCall := fake.getPolicyGroupArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRodeClient) GetPolicyGroupReturns(result1 *v1alpha1.PolicyGroup, result2 error) {
	fake.getPolicyGroupMutex.Lock()
	defer fake.getPolicyGroupMutex.Unlock()
	fake.GetPolicyGroupStub = nil
	fake.getPolicyGroupReturns = struct {
		result1 *v1alpha1.PolicyGroup
		result2 error
	}{result1, result2}
}

func (fake *FakeRodeClient) GetPolicyGroupReturnsOnCall(i int, result1 *v1alpha1.PolicyGroup, result2 error) {
	fake.getPolicyGroupMutex.Lock()
	defer fake.getPolicyGroupMutex.Unlock()
	fake.GetPolicyGroupStub = nil
	if fake.getPolicyGroupReturnsOnCall == nil {
		fake.getPolicyGroupReturnsOnCall = make(map[int]struct {
			result1 *v1alpha1.PolicyGroup
			result2 error
		})
	}
	fake.getPolicyGroupReturnsOnCall[i] = struct {
		result1 *v1alpha1.PolicyGroup
		result2 error
	}{result1, result2}
}

func (fake *FakeRodeClient) GetResourceEvaluation(arg1 context.Context, arg2 *v1alpha1.GetResourceEvaluationRequest, arg3 ...grpc.CallOption) (*v1alpha1.ResourceEvaluationResult, error) {
	fake.getResourceEvaluationMutex.Lock()
	ret, specificReturn := fake.getResourceEvaluationReturnsOnCall[len(fake.getResourceEvaluationArgsForCall)]
	fake.getResourceEvaluationArgsForCall = append(fake.getResourceEvaluationArgsForCall, struct {
		arg1 context.Context
		arg2 *v1alpha1.GetResourceEvaluationRequest
		arg3 []grpc.CallOption
	}{arg1, arg2, arg3})
	stub := fake.GetResourceEvaluationStub
	fakeReturns := fake.getResourceEvaluationReturns
	fake.recordInvocation("GetResourceEvaluation", []interface{}{arg1, arg2, arg3})
	fake.getResourceEvaluationMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRodeClient) GetResourceEvaluationCallCount() int {
	fake.getResourceEvaluationMutex.RLock()
	defer fake.getResourceEvaluationMutex.RUnlock()
	return len(fake.getResourceEvaluationArgsForCall)
}

func (fake *FakeRodeClient) GetResourceEvaluationCalls(stub func(context.Context, *v1alpha1.GetResourceEvaluationRequest, ...grpc.CallOption) (*v1alpha1.ResourceEvaluationResult, error)) {
	fake.getResourceEvaluationMutex.Lock()
	defer fake.getResourceEvaluationMutex.Unlock()
	fake.GetResourceEvaluationStub = stub
}

func (fake *FakeRodeClient) GetResourceEvaluationArgsForCall(i int) (context.Context, *v1alpha1.GetResourceEvaluationRequest, []grpc.CallOption) {
	fake.getResourceEvaluationMutex.RLock()
	defer fake.getResourceEvaluationMutex.RUnlock()
	argsForCall := fake.getResourceEvaluationArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRodeClient) GetResourceEvaluationReturns(result1 *v1alpha1.ResourceEvaluationResult, result2 error) {
	fake.getResourceEvaluationMutex.Lock()
	defer fake.getResourceEvaluationMutex.Unlock()
	fake.GetResourceEvaluationStub = nil
	fake.getResourceEvaluationReturns = struct {
		result1 *v1alpha1.ResourceEvaluationResult
		result2 error
	}{result1, result2}
}

func (fake *FakeRodeClient) GetResourceEvaluationReturnsOnCall(i int, result1 *v1alpha1.ResourceEvaluationResult, result2 error) {
	fake.getResourceEvaluationMutex.Lock()
	defer fake.getResourceEvaluationMutex.Unlock()
	fake.GetResourceEvaluationStub = nil
	if fake.getResourceEvaluationReturnsOnCall == nil {
		fake.getResourceEvaluationReturnsOnCall = make(map[int]struct {
			result1 *v1alpha1.ResourceEvaluationResult
			result2 error
		})
	}
	fake.getResourceEvaluationReturnsOnCall[i] = struct {
		result1 *v1alpha1.ResourceEvaluationResult
		result2 error
	}{result1, result2}
}

func (fake *FakeRodeClient) ListOccurrences(arg1 context.Context, arg2 *v1alpha1.ListOccurrencesRequest, arg3 ...grpc.CallOption) (*v1alpha1.ListOccurrencesResponse, error) {
	fake.listOccurrencesMutex.Lock()
	ret, specificReturn := fake.listOccurrencesReturnsOnCall[len(fake.listOccurrencesArgsForCall)]
	fake.listOccurrencesArgsForCall = append(fake.listOccurrencesArgsForCall, struct {
		arg1 context.Context
		arg2 *v1alpha1.ListOccurrencesRequest
		arg3 []grpc.CallOption
	}{arg1, arg2, arg3})
	stub := fake.ListOccurrencesStub
	fakeReturns := fake.listOccurrencesReturns
	fake.recordInvocation("ListOccurrences", []interface{}{arg1, arg2, arg3})
	fake.listOccurrencesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRodeClient) ListOccurrencesCallCount() int {
	fake.listOccurrencesMutex.RLock()
	defer fake.listOccurrencesMutex.RUnlock()
	return len(fake.listOccurrencesArgsForCall)
}

func (fake *FakeRodeClient) ListOccurrencesCalls(stub func(context.Context, *v1alpha1.ListOccurrencesRequest, ...grpc.CallOption) (*v1alpha1.ListOccurrencesResponse, error)) {
	fake.listOccurrencesMutex.Lock()
	defer fake.listOccurrencesMutex.Unlock()
	fake.ListOccurrencesStub = stub
}

func (fake *FakeRodeClient) ListOccurrencesArgsForCall(i int) (context.Context, *v1alpha1.ListOccurrencesRequest, []grpc.CallOption) {
	fake.listOccurrencesMutex.RLock()
	defer fake.listOccurrencesMutex.RUnlock()
	argsForCall := fake.listOccurrencesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRodeClient) ListOccurrencesReturns(result1 *v1alpha1.ListOccurrencesResponse, result2 error) {
	fake.listOccurrencesMutex.Lock()
	defer fake.listOccurrencesMutex.Unlock()
	fake.ListOccurrencesStub = nil
	fake.listOccurrencesReturns = struct {
		result1 *v1alpha1.ListOccurrencesResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeRodeClient) ListOccurrencesReturnsOnCall(i int, result1 *v1alpha1.ListOccurrencesResponse, result2 error) {
	fake.listOccurrencesMutex.Lock()
	defer fake.listOccurrencesMutex.Unlock()
	fake.ListOccurrencesStub = nil
	if fake.listOccurrencesReturnsOnCall == nil {
		fake.listOccurrencesReturnsOnCall = make(map[int]struct {
			result1 *v1alpha1.ListOccurrencesResponse
			result2 error
		})
	}
	fake.listOccurrencesReturnsOnCall[i] = struct {
		result1 *v1alpha1.ListOccurrencesResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeRodeClient) ListPolicies(arg1 context.Context, arg2 *v1alpha1.ListPoliciesRequest, arg3 ...grpc.CallOption) (*v1alpha1.ListPoliciesResponse, error) {
	fake.listPoliciesMutex.Lock()
	ret, specificReturn := fake.listPoliciesReturnsOnCall[len(fake.listPoliciesArgsForCall)]
	fake.listPoliciesArgsForCall = append(fake.listPoliciesArgsForCall, struct {
		arg1 context.Context
		arg2 *v1alpha1.ListPoliciesRequest
		arg3 []grpc.CallOption
	}{arg1, arg2, arg3})
	stub := fake.ListPoliciesStub
	fakeReturns := fake.listPoliciesReturns
	fake.recordInvocation("ListPolicies", []interface{}{arg1, arg2, arg3})
	fake.listPoliciesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRodeClient) ListPoliciesCallCount() int {
	fake.listPoliciesMutex.RLock()
	defer fake.listPoliciesMutex.RUnlock()
	return len(fake.listPoliciesArgsForCall)
}

func (fake *FakeRodeClient) ListPoliciesCalls(stub func(context.Context, *v1alpha1.ListPoliciesRequest, ...grpc.CallOption) (*v1alpha1.ListPoliciesResponse, error)) {
	fake.listPoliciesMutex.Lock()
	defer fake.listPoliciesMutex.Unlock()
	fake.ListPoliciesStub = stub
}

func (fake *FakeRodeClient) ListPoliciesArgsForCall(i int) (context.Context, *v1alpha1.ListPoliciesRequest, []grpc.CallOption) {
	fake.listPoliciesMutex.RLock()
	defer fake.listPoliciesMutex.RUnlock()
	argsForCall := fake.listPoliciesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRodeClient) ListPoliciesReturns(result1 *v1alpha1.ListPoliciesResponse, result2 error) {
	fake.listPoliciesMutex.Lock()
	defer fake.listPoliciesMutex.Unlock()
	fake.ListPoliciesStub = nil
	fake.listPoliciesReturns = struct {
		result1 *v1alpha1.ListPoliciesResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeRodeClient) ListPoliciesReturnsOnCall(i int, result1 *v1alpha1.ListPoliciesResponse, result2 error) {
	fake.listPoliciesMutex.Lock()
	defer fake.listPoliciesMutex.Unlock()
	fake.ListPoliciesStub = nil
	if fake.listPoliciesReturnsOnCall == nil {
		fake.listPoliciesReturnsOnCall = make(map[int]struct {
			result1 *v1alpha1.ListPoliciesResponse
			result2 error
		})
	}
	fake.listPoliciesReturnsOnCall[i] = struct {
		result1 *v1alpha1.ListPoliciesResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeRodeClient) ListPolicyAssignments(arg1 context.Context, arg2 *v1alpha1.ListPolicyAssignmentsRequest, arg3 ...grpc.CallOption) (*v1alpha1.ListPolicyAssignmentsResponse, error) {
	fake.listPolicyAssignmentsMutex.Lock()
	ret, specificReturn := fake.listPolicyAssignmentsReturnsOnCall[len(fake.listPolicyAssignmentsArgsForCall)]
	fake.listPolicyAssignmentsArgsForCall = append(fake.listPolicyAssignmentsArgsForCall, struct {
		arg1 context.Context
		arg2 *v1alpha1.ListPolicyAssignmentsRequest
		arg3 []grpc.CallOption
	}{arg1, arg2, arg3})
	stub := fake.ListPolicyAssignmentsStub
	fakeReturns := fake.listPolicyAssignmentsReturns
	fake.recordInvocation("ListPolicyAssignments", []interface{}{arg1, arg2, arg3})
	fake.listPolicyAssignmentsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRodeClient) ListPolicyAssignmentsCallCount() int {
	fake.listPolicyAssignmentsMutex.RLock()
	defer fake.listPolicyAssignmentsMutex.RUnlock()
	return len(fake.listPolicyAssignmentsArgsForCall)
}

func (fake *FakeRodeClient) ListPolicyAssignmentsCalls(stub func(context.Context, *v1alpha1.ListPolicyAssignmentsRequest, ...grpc.CallOption) (*v1alpha1.ListPolicyAssignmentsResponse, error)) {
	fake.listPolicyAssignmentsMutex.Lock()
	defer fake.listPolicyAssignmentsMutex.Unlock()
	fake.ListPolicyAssignmentsStub = stub
}

func (fake *FakeRodeClient) ListPolicyAssignmentsArgsForCall(i int) (context.Context, *v1alpha1.ListPolicyAssignmentsRequest, []grpc.CallOption) {
	fake.listPolicyAssignmentsMutex.RLock()
	defer fake.listPolicyAssignmentsMutex.RUnlock()
	argsForCall := fake.listPolicyAssignmentsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRodeClient) ListPolicyAssignmentsReturns(result1 *v1alpha1.ListPolicyAssignmentsResponse, result2 error) {
	fake.listPolicyAssignmentsMutex.Lock()
	defer fake.listPolicyAssignmentsMutex.Unlock()
	fake.ListPolicyAssignmentsStub = nil
	fake.listPolicyAssignmentsReturns = struct {
		result1 *v1alpha1.ListPolicyAssignmentsResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeRodeClient) ListPolicyAssignmentsReturnsOnCall(i int, result1 *v1alpha1.ListPolicyAssignmentsResponse, result2 error) {
	fake.listPolicyAssignmentsMutex.Lock()
	defer fake.listPolicyAssignmentsMutex.Unlock()
	fake.ListPolicyAssignmentsStub = nil
	if fake.listPolicyAssignmentsReturnsOnCall == nil {
		fake.listPolicyAssignmentsReturnsOnCall = make(map[int]struct {
			result1 *v1alpha1.ListPolicyAssignmentsResponse
			result2 error
		})
	}
	fake.listPolicyAssignmentsReturnsOnCall[i] = struct {
		result1 *v1alpha1.ListPolicyAssignmentsResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeRodeClient) ListPolicyGroups(arg1 context.Context, arg2 *v1alpha1.ListPolicyGroupsRequest, arg3 ...grpc.CallOption) (*v1alpha1.ListPolicyGroupsResponse, error) {
	fake.listPolicyGroupsMutex.Lock()
	ret, specificReturn := fake.listPolicyGroupsReturnsOnCall[len(fake.listPolicyGroupsArgsForCall)]
	fake.listPolicyGroupsArgsForCall = append(fake.listPolicyGroupsArgsForCall, struct {
		arg1 context.Context
		arg2 *v1alpha1.ListPolicyGroupsRequest
		arg3 []grpc.CallOption
	}{arg1, arg2, arg3})
	stub := fake.ListPolicyGroupsStub
	fakeReturns := fake.listPolicyGroupsReturns
	fake.recordInvocation("ListPolicyGroups", []interface{}{arg1, arg2, arg3})
	fake.listPolicyGroupsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRodeClient) ListPolicyGroupsCallCount() int {
	fake.listPolicyGroupsMutex.RLock()
	defer fake.listPolicyGroupsMutex.RUnlock()
	return len(fake.listPolicyGroupsArgsForCall)
}

func (fake *FakeRodeClient) ListPolicyGroupsCalls(stub func(context.Context, *v1alpha1.ListPolicyGroupsRequest, ...grpc.CallOption) (*v1alpha1.ListPolicyGroupsResponse, error)) {
	fake.listPolicyGroupsMutex.Lock()
	defer fake.listPolicyGroupsMutex.Unlock()
	fake.ListPolicyGroupsStub = stub
}

func (fake *FakeRodeClient) ListPolicyGroupsArgsForCall(i int) (context.Context, *v1alpha1.ListPolicyGroupsRequest, []grpc.CallOption) {
	fake.listPolicyGroupsMutex.RLock()
	defer fake.listPolicyGroupsMutex.RUnlock()
	argsForCall := fake.listPolicyGroupsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRodeClient) ListPolicyGroupsReturns(result1 *v1alpha1.ListPolicyGroupsResponse, result2 error) {
	fake.listPolicyGroupsMutex.Lock()
	defer fake.listPolicyGroupsMutex.Unlock()
	fake.ListPolicyGroupsStub = nil
	fake.listPolicyGroupsReturns = struct {
		result1 *v1alpha1.ListPolicyGroupsResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeRodeClient) ListPolicyGroupsReturnsOnCall(i int, result1 *v1alpha1.ListPolicyGroupsResponse, result2 error) {
	fake.listPolicyGroupsMutex.Lock()
	defer fake.listPolicyGroupsMutex.Unlock()
	fake.ListPolicyGroupsStub = nil
	if fake.listPolicyGroupsReturnsOnCall == nil {
		fake.listPolicyGroupsReturnsOnCall = make(map[int]struct {
			result1 *v1alpha1.ListPolicyGroupsResponse
			result2 error
		})
	}
	fake.listPolicyGroupsReturnsOnCall[i] = struct {
		result1 *v1alpha1.ListPolicyGroupsResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeRodeClient) ListPolicyVersions(arg1 context.Context, arg2 *v1alpha1.ListPolicyVersionsRequest, arg3 ...grpc.CallOption) (*v1alpha1.ListPolicyVersionsResponse, error) {
	fake.listPolicyVersionsMutex.Lock()
	ret, specificReturn := fake.listPolicyVersionsReturnsOnCall[len(fake.listPolicyVersionsArgsForCall)]
	fake.listPolicyVersionsArgsForCall = append(fake.listPolicyVersionsArgsForCall, struct {
		arg1 context.Context
		arg2 *v1alpha1.ListPolicyVersionsRequest
		arg3 []grpc.CallOption
	}{arg1, arg2, arg3})
	stub := fake.ListPolicyVersionsStub
	fakeReturns := fake.listPolicyVersionsReturns
	fake.recordInvocation("ListPolicyVersions", []interface{}{arg1, arg2, arg3})
	fake.listPolicyVersionsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRodeClient) ListPolicyVersionsCallCount() int {
	fake.listPolicyVersionsMutex.RLock()
	defer fake.listPolicyVersionsMutex.RUnlock()
	return len(fake.listPolicyVersionsArgsForCall)
}

func (fake *FakeRodeClient) ListPolicyVersionsCalls(stub func(context.Context, *v1alpha1.ListPolicyVersionsRequest, ...grpc.CallOption) (*v1alpha1.ListPolicyVersionsResponse, error)) {
	fake.listPolicyVersionsMutex.Lock()
	defer fake.listPolicyVersionsMutex.Unlock()
	fake.ListPolicyVersionsStub = stub
}

func (fake *FakeRodeClient) ListPolicyVersionsArgsForCall(i int) (context.Context, *v1alpha1.ListPolicyVersionsRequest, []grpc.CallOption) {
	fake.listPolicyVersionsMutex.RLock()
	defer fake.listPolicyVersionsMutex.RUnlock()
	argsForCall := fake.listPolicyVersionsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRodeClient) ListPolicyVersionsReturns(result1 *v1alpha1.ListPolicyVersionsResponse, result2 error) {
	fake.listPolicyVersionsMutex.Lock()
	defer fake.listPolicyVersionsMutex.Unlock()
	fake.ListPolicyVersionsStub = nil
	fake.listPolicyVersionsReturns = struct {
		result1 *v1alpha1.ListPolicyVersionsResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeRodeClient) ListPolicyVersionsReturnsOnCall(i int, result1 *v1alpha1.ListPolicyVersionsResponse, result2 error) {
	fake.listPolicyVersionsMutex.Lock()
	defer fake.listPolicyVersionsMutex.Unlock()
	fake.ListPolicyVersionsStub = nil
	if fake.listPolicyVersionsReturnsOnCall == nil {
		fake.listPolicyVersionsReturnsOnCall = make(map[int]struct {
			result1 *v1alpha1.ListPolicyVersionsResponse
			result2 error
		})
	}
	fake.listPolicyVersionsReturnsOnCall[i] = struct {
		result1 *v1alpha1.ListPolicyVersionsResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeRodeClient) ListResourceEvaluations(arg1 context.Context, arg2 *v1alpha1.ListResourceEvaluationsRequest, arg3 ...grpc.CallOption) (*v1alpha1.ListResourceEvaluationsResponse, error) {
	fake.listResourceEvaluationsMutex.Lock()
	ret, specificReturn := fake.listResourceEvaluationsReturnsOnCall[len(fake.listResourceEvaluationsArgsForCall)]
	fake.listResourceEvaluationsArgsForCall = append(fake.listResourceEvaluationsArgsForCall, struct {
		arg1 context.Context
		arg2 *v1alpha1.ListResourceEvaluationsRequest
		arg3 []grpc.CallOption
	}{arg1, arg2, arg3})
	stub := fake.ListResourceEvaluationsStub
	fakeReturns := fake.listResourceEvaluationsReturns
	fake.recordInvocation("ListResourceEvaluations", []interface{}{arg1, arg2, arg3})
	fake.listResourceEvaluationsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRodeClient) ListResourceEvaluationsCallCount() int {
	fake.listResourceEvaluationsMutex.RLock()
	defer fake.listResourceEvaluationsMutex.RUnlock()
	return len(fake.listResourceEvaluationsArgsForCall)
}

func (fake *FakeRodeClient) ListResourceEvaluationsCalls(stub func(context.Context, *v1alpha1.ListResourceEvaluationsRequest, ...grpc.CallOption) (*v1alpha1.ListResourceEvaluationsResponse, error)) {
	fake.listResourceEvaluationsMutex.Lock()
	defer fake.listResourceEvaluationsMutex.Unlock()
	fake.ListResourceEvaluationsStub = stub
}

func (fake *FakeRodeClient) ListResourceEvaluationsArgsForCall(i int) (context.Context, *v1alpha1.ListResourceEvaluationsRequest, []grpc.CallOption) {
	fake.listResourceEvaluationsMutex.RLock()
	defer fake.listResourceEvaluationsMutex.RUnlock()
	argsForCall := fake.listResourceEvaluationsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRodeClient) ListResourceEvaluationsReturns(result1 *v1alpha1.ListResourceEvaluationsResponse, result2 error) {
	fake.listResourceEvaluationsMutex.Lock()
	defer fake.listResourceEvaluationsMutex.Unlock()
	fake.ListResourceEvaluationsStub = nil
	fake.listResourceEvaluationsReturns = struct {
		result1 *v1alpha1.ListResourceEvaluationsResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeRodeClient) ListResourceEvaluationsReturnsOnCall(i int, result1 *v1alpha1.ListResourceEvaluationsResponse, result2 error) {
	fake.listResourceEvaluationsMutex.Lock()
	defer fake.listResourceEvaluationsMutex.Unlock()
	fake.ListResourceEvaluationsStub = nil
	if fake.listResourceEvaluationsReturnsOnCall == nil {
		fake.listResourceEvaluationsReturnsOnCall = make(map[int]struct {
			result1 *v1alpha1.ListResourceEvaluationsResponse
			result2 error
		})
	}
	fake.listResourceEvaluationsReturnsOnCall[i] = struct {
		result1 *v1alpha1.ListResourceEvaluationsResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeRodeClient) ListResourceVersions(arg1 context.Context, arg2 *v1alpha1.ListResourceVersionsRequest, arg3 ...grpc.CallOption) (*v1alpha1.ListResourceVersionsResponse, error) {
	fake.listResourceVersionsMutex.Lock()
	ret, specificReturn := fake.listResourceVersionsReturnsOnCall[len(fake.listResourceVersionsArgsForCall)]
	fake.listResourceVersionsArgsForCall = append(fake.listResourceVersionsArgsForCall, struct {
		arg1 context.Context
		arg2 *v1alpha1.ListResourceVersionsRequest
		arg3 []grpc.CallOption
	}{arg1, arg2, arg3})
	stub := fake.ListResourceVersionsStub
	fakeReturns := fake.listResourceVersionsReturns
	fake.recordInvocation("ListResourceVersions", []interface{}{arg1, arg2, arg3})
	fake.listResourceVersionsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRodeClient) ListResourceVersionsCallCount() int {
	fake.listResourceVersionsMutex.RLock()
	defer fake.listResourceVersionsMutex.RUnlock()
	return len(fake.listResourceVersionsArgsForCall)
}

func (fake *FakeRodeClient) ListResourceVersionsCalls(stub func(context.Context, *v1alpha1.ListResourceVersionsRequest, ...grpc.CallOption) (*v1alpha1.ListResourceVersionsResponse, error)) {
	fake.listResourceVersionsMutex.Lock()
	defer fake.listResourceVersionsMutex.Unlock()
	fake.ListResourceVersionsStub = stub
}

func (fake *FakeRodeClient) ListResourceVersionsArgsForCall(i int) (context.Context, *v1alpha1.ListResourceVersionsRequest, []grpc.CallOption) {
	fake.listResourceVersionsMutex.RLock()
	defer fake.listResourceVersionsMutex.RUnlock()
	argsForCall := fake.listResourceVersionsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRodeClient) ListResourceVersionsReturns(result1 *v1alpha1.ListResourceVersionsResponse, result2 error) {
	fake.listResourceVersionsMutex.Lock()
	defer fake.listResourceVersionsMutex.Unlock()
	fake.ListResourceVersionsStub = nil
	fake.listResourceVersionsReturns = struct {
		result1 *v1alpha1.ListResourceVersionsResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeRodeClient) ListResourceVersionsReturnsOnCall(i int, result1 *v1alpha1.ListResourceVersionsResponse, result2 error) {
	fake.listResourceVersionsMutex.Lock()
	defer fake.listResourceVersionsMutex.Unlock()
	fake.ListResourceVersionsStub = nil
	if fake.listResourceVersionsReturnsOnCall == nil {
		fake.listResourceVersionsReturnsOnCall = make(map[int]struct {
			result1 *v1alpha1.ListResourceVersionsResponse
			result2 error
		})
	}
	fake.listResourceVersionsReturnsOnCall[i] = struct {
		result1 *v1alpha1.ListResourceVersionsResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeRodeClient) ListResources(arg1 context.Context, arg2 *v1alpha1.ListResourcesRequest, arg3 ...grpc.CallOption) (*v1alpha1.ListResourcesResponse, error) {
	fake.listResourcesMutex.Lock()
	ret, specificReturn := fake.listResourcesReturnsOnCall[len(fake.listResourcesArgsForCall)]
	fake.listResourcesArgsForCall = append(fake.listResourcesArgsForCall, struct {
		arg1 context.Context
		arg2 *v1alpha1.ListResourcesRequest
		arg3 []grpc.CallOption
	}{arg1, arg2, arg3})
	stub := fake.ListResourcesStub
	fakeReturns := fake.listResourcesReturns
	fake.recordInvocation("ListResources", []interface{}{arg1, arg2, arg3})
	fake.listResourcesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRodeClient) ListResourcesCallCount() int {
	fake.listResourcesMutex.RLock()
	defer fake.listResourcesMutex.RUnlock()
	return len(fake.listResourcesArgsForCall)
}

func (fake *FakeRodeClient) ListResourcesCalls(stub func(context.Context, *v1alpha1.ListResourcesRequest, ...grpc.CallOption) (*v1alpha1.ListResourcesResponse, error)) {
	fake.listResourcesMutex.Lock()
	defer fake.listResourcesMutex.Unlock()
	fake.ListResourcesStub = stub
}

func (fake *FakeRodeClient) ListResourcesArgsForCall(i int) (context.Context, *v1alpha1.ListResourcesRequest, []grpc.CallOption) {
	fake.listResourcesMutex.RLock()
	defer fake.listResourcesMutex.RUnlock()
	argsForCall := fake.listResourcesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRodeClient) ListResourcesReturns(result1 *v1alpha1.ListResourcesResponse, result2 error) {
	fake.listResourcesMutex.Lock()
	defer fake.listResourcesMutex.Unlock()
	fake.ListResourcesStub = nil
	fake.listResourcesReturns = struct {
		result1 *v1alpha1.ListResourcesResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeRodeClient) ListResourcesReturnsOnCall(i int, result1 *v1alpha1.ListResourcesResponse, result2 error) {
	fake.listResourcesMutex.Lock()
	defer fake.listResourcesMutex.Unlock()
	fake.ListResourcesStub = nil
	if fake.listResourcesReturnsOnCall == nil {
		fake.listResourcesReturnsOnCall = make(map[int]struct {
			result1 *v1alpha1.ListResourcesResponse
			result2 error
		})
	}
	fake.listResourcesReturnsOnCall[i] = struct {
		result1 *v1alpha1.ListResourcesResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeRodeClient) ListVersionedResourceOccurrences(arg1 context.Context, arg2 *v1alpha1.ListVersionedResourceOccurrencesRequest, arg3 ...grpc.CallOption) (*v1alpha1.ListVersionedResourceOccurrencesResponse, error) {
	fake.listVersionedResourceOccurrencesMutex.Lock()
	ret, specificReturn := fake.listVersionedResourceOccurrencesReturnsOnCall[len(fake.listVersionedResourceOccurrencesArgsForCall)]
	fake.listVersionedResourceOccurrencesArgsForCall = append(fake.listVersionedResourceOccurrencesArgsForCall, struct {
		arg1 context.Context
		arg2 *v1alpha1.ListVersionedResourceOccurrencesRequest
		arg3 []grpc.CallOption
	}{arg1, arg2, arg3})
	stub := fake.ListVersionedResourceOccurrencesStub
	fakeReturns := fake.listVersionedResourceOccurrencesReturns
	fake.recordInvocation("ListVersionedResourceOccurrences", []interface{}{arg1, arg2, arg3})
	fake.listVersionedResourceOccurrencesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRodeClient) ListVersionedResourceOccurrencesCallCount() int {
	fake.listVersionedResourceOccurrencesMutex.RLock()
	defer fake.listVersionedResourceOccurrencesMutex.RUnlock()
	return len(fake.listVersionedResourceOccurrencesArgsForCall)
}

func (fake *FakeRodeClient) ListVersionedResourceOccurrencesCalls(stub func(context.Context, *v1alpha1.ListVersionedResourceOccurrencesRequest, ...grpc.CallOption) (*v1alpha1.ListVersionedResourceOccurrencesResponse, error)) {
	fake.listVersionedResourceOccurrencesMutex.Lock()
	defer fake.listVersionedResourceOccurrencesMutex.Unlock()
	fake.ListVersionedResourceOccurrencesStub = stub
}

func (fake *FakeRodeClient) ListVersionedResourceOccurrencesArgsForCall(i int) (context.Context, *v1alpha1.ListVersionedResourceOccurrencesRequest, []grpc.CallOption) {
	fake.listVersionedResourceOccurrencesMutex.RLock()
	defer fake.listVersionedResourceOccurrencesMutex.RUnlock()
	argsForCall := fake.listVersionedResourceOccurrencesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRodeClient) ListVersionedResourceOccurrencesReturns(result1 *v1alpha1.ListVersionedResourceOccurrencesResponse, result2 error) {
	fake.listVersionedResourceOccurrencesMutex.Lock()
	defer fake.listVersionedResourceOccurrencesMutex.Unlock()
	fake.ListVersionedResourceOccurrencesStub = nil
	fake.listVersionedResourceOccurrencesReturns = struct {
		result1 *v1alpha1.ListVersionedResourceOccurrencesResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeRodeClient) ListVersionedResourceOccurrencesReturnsOnCall(i int, result1 *v1alpha1.ListVersionedResourceOccurrencesResponse, result2 error) {
	fake.listVersionedResourceOccurrencesMutex.Lock()
	defer fake.listVersionedResourceOccurrencesMutex.Unlock()
	fake.ListVersionedResourceOccurrencesStub = nil
	if fake.listVersionedResourceOccurrencesReturnsOnCall == nil {
		fake.listVersionedResourceOccurrencesReturnsOnCall = make(map[int]struct {
			result1 *v1alpha1.ListVersionedResourceOccurrencesResponse
			result2 error
		})
	}
	fake.listVersionedResourceOccurrencesReturnsOnCall[i] = struct {
		result1 *v1alpha1.ListVersionedResourceOccurrencesResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeRodeClient) RegisterCollector(arg1 context.Context, arg2 *v1alpha1.RegisterCollectorRequest, arg3 ...grpc.CallOption) (*v1alpha1.RegisterCollectorResponse, error) {
	fake.registerCollectorMutex.Lock()
	ret, specificReturn := fake.registerCollectorReturnsOnCall[len(fake.registerCollectorArgsForCall)]
	fake.registerCollectorArgsForCall = append(fake.registerCollectorArgsForCall, struct {
		arg1 context.Context
		arg2 *v1alpha1.RegisterCollectorRequest
		arg3 []grpc.CallOption
	}{arg1, arg2, arg3})
	stub := fake.RegisterCollectorStub
	fakeReturns := fake.registerCollectorReturns
	fake.recordInvocation("RegisterCollector", []interface{}{arg1, arg2, arg3})
	fake.registerCollectorMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRodeClient) RegisterCollectorCallCount() int {
	fake.registerCollectorMutex.RLock()
	defer fake.registerCollectorMutex.RUnlock()
	return len(fake.registerCollectorArgsForCall)
}

func (fake *FakeRodeClient) RegisterCollectorCalls(stub func(context.Context, *v1alpha1.RegisterCollectorRequest, ...grpc.CallOption) (*v1alpha1.RegisterCollectorResponse, error)) {
	fake.registerCollectorMutex.Lock()
	defer fake.registerCollectorMutex.Unlock()
	fake.RegisterCollectorStub = stub
}

func (fake *FakeRodeClient) RegisterCollectorArgsForCall(i int) (context.Context, *v1alpha1.RegisterCollectorRequest, []grpc.CallOption) {
	fake.registerCollectorMutex.RLock()
	defer fake.registerCollectorMutex.RUnlock()
	argsForCall := fake.registerCollectorArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRodeClient) RegisterCollectorReturns(result1 *v1alpha1.RegisterCollectorResponse, result2 error) {
	fake.registerCollectorMutex.Lock()
	defer fake.registerCollectorMutex.Unlock()
	fake.RegisterCollectorStub = nil
	fake.registerCollectorReturns = struct {
		result1 *v1alpha1.RegisterCollectorResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeRodeClient) RegisterCollectorReturnsOnCall(i int, result1 *v1alpha1.RegisterCollectorResponse, result2 error) {
	fake.registerCollectorMutex.Lock()
	defer fake.registerCollectorMutex.Unlock()
	fake.RegisterCollectorStub = nil
	if fake.registerCollectorReturnsOnCall == nil {
		fake.registerCollectorReturnsOnCall = make(map[int]struct {
			result1 *v1alpha1.RegisterCollectorResponse
			result2 error
		})
	}
	fake.registerCollectorReturnsOnCall[i] = struct {
		result1 *v1alpha1.RegisterCollectorResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeRodeClient) UpdateOccurrence(arg1 context.Context, arg2 *v1alpha1.UpdateOccurrenceRequest, arg3 ...grpc.CallOption) (*grafeas_go_proto.Occurrence, error) {
	fake.updateOccurrenceMutex.Lock()
	ret, specificReturn := fake.updateOccurrenceReturnsOnCall[len(fake.updateOccurrenceArgsForCall)]
	fake.updateOccurrenceArgsForCall = append(fake.updateOccurrenceArgsForCall, struct {
		arg1 context.Context
		arg2 *v1alpha1.UpdateOccurrenceRequest
		arg3 []grpc.CallOption
	}{arg1, arg2, arg3})
	stub := fake.UpdateOccurrenceStub
	fakeReturns := fake.updateOccurrenceReturns
	fake.recordInvocation("UpdateOccurrence", []interface{}{arg1, arg2, arg3})
	fake.updateOccurrenceMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRodeClient) UpdateOccurrenceCallCount() int {
	fake.updateOccurrenceMutex.RLock()
	defer fake.updateOccurrenceMutex.RUnlock()
	return len(fake.updateOccurrenceArgsForCall)
}

func (fake *FakeRodeClient) UpdateOccurrenceCalls(stub func(context.Context, *v1alpha1.UpdateOccurrenceRequest, ...grpc.CallOption) (*grafeas_go_proto.Occurrence, error)) {
	fake.updateOccurrenceMutex.Lock()
	defer fake.updateOccurrenceMutex.Unlock()
	fake.UpdateOccurrenceStub = stub
}

func (fake *FakeRodeClient) UpdateOccurrenceArgsForCall(i int) (context.Context, *v1alpha1.UpdateOccurrenceRequest, []grpc.CallOption) {
	fake.updateOccurrenceMutex.RLock()
	defer fake.updateOccurrenceMutex.RUnlock()
	argsForCall := fake.updateOccurrenceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRodeClient) UpdateOccurrenceReturns(result1 *grafeas_go_proto.Occurrence, result2 error) {
	fake.updateOccurrenceMutex.Lock()
	defer fake.updateOccurrenceMutex.Unlock()
	fake.UpdateOccurrenceStub = nil
	fake.updateOccurrenceReturns = struct {
		result1 *grafeas_go_proto.Occurrence
		result2 error
	}{result1, result2}
}

func (fake *FakeRodeClient) UpdateOccurrenceReturnsOnCall(i int, result1 *grafeas_go_proto.Occurrence, result2 error) {
	fake.updateOccurrenceMutex.Lock()
	defer fake.updateOccurrenceMutex.Unlock()
	fake.UpdateOccurrenceStub = nil
	if fake.updateOccurrenceReturnsOnCall == nil {
		fake.updateOccurrenceReturnsOnCall = make(map[int]struct {
			result1 *grafeas_go_proto.Occurrence
			result2 error
		})
	}
	fake.updateOccurrenceReturnsOnCall[i] = struct {
		result1 *grafeas_go_proto.Occurrence
		result2 error
	}{result1, result2}
}

func (fake *FakeRodeClient) UpdatePolicy(arg1 context.Context, arg2 *v1alpha1.UpdatePolicyRequest, arg3 ...grpc.CallOption) (*v1alpha1.Policy, error) {
	fake.updatePolicyMutex.Lock()
	ret, specificReturn := fake.updatePolicyReturnsOnCall[len(fake.updatePolicyArgsForCall)]
	fake.updatePolicyArgsForCall = append(fake.updatePolicyArgsForCall, struct {
		arg1 context.Context
		arg2 *v1alpha1.UpdatePolicyRequest
		arg3 []grpc.CallOption
	}{arg1, arg2, arg3})
	stub := fake.UpdatePolicyStub
	fakeReturns := fake.updatePolicyReturns
	fake.recordInvocation("UpdatePolicy", []interface{}{arg1, arg2, arg3})
	fake.updatePolicyMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRodeClient) UpdatePolicyCallCount() int {
	fake.updatePolicyMutex.RLock()
	defer fake.updatePolicyMutex.RUnlock()
	return len(fake.updatePolicyArgsForCall)
}

func (fake *FakeRodeClient) UpdatePolicyCalls(stub func(context.Context, *v1alpha1.UpdatePolicyRequest, ...grpc.CallOption) (*v1alpha1.Policy, error)) {
	fake.updatePolicyMutex.Lock()
	defer fake.updatePolicyMutex.Unlock()
	fake.UpdatePolicyStub = stub
}

func (fake *FakeRodeClient) UpdatePolicyArgsForCall(i int) (context.Context, *v1alpha1.UpdatePolicyRequest, []grpc.CallOption) {
	fake.updatePolicyMutex.RLock()
	defer fake.updatePolicyMutex.RUnlock()
	argsForCall := fake.updatePolicyArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRodeClient) UpdatePolicyReturns(result1 *v1alpha1.Policy, result2 error) {
	fake.updatePolicyMutex.Lock()
	defer fake.updatePolicyMutex.Unlock()
	fake.UpdatePolicyStub = nil
	fake.updatePolicyReturns = struct {
		result1 *v1alpha1.Policy
		result2 error
	}{result1, result2}
}

func (fake *FakeRodeClient) UpdatePolicyReturnsOnCall(i int, result1 *v1alpha1.Policy, result2 error) {
	fake.updatePolicyMutex.Lock()
	defer fake.updatePolicyMutex.Unlock()
	fake.UpdatePolicyStub = nil
	if fake.updatePolicyReturnsOnCall == nil {
		fake.updatePolicyReturnsOnCall = make(map[int]struct {
			result1 *v1alpha1.Policy
			result2 error
		})
	}
	fake.updatePolicyReturnsOnCall[i] = struct {
		result1 *v1alpha1.Policy
		result2 error
	}{result1, result2}
}

func (fake *FakeRodeClient) UpdatePolicyAssignment(arg1 context.Context, arg2 *v1alpha1.PolicyAssignment, arg3 ...grpc.CallOption) (*v1alpha1.PolicyAssignment, error) {
	fake.updatePolicyAssignmentMutex.Lock()
	ret, specificReturn := fake.updatePolicyAssignmentReturnsOnCall[len(fake.updatePolicyAssignmentArgsForCall)]
	fake.updatePolicyAssignmentArgsForCall = append(fake.updatePolicyAssignmentArgsForCall, struct {
		arg1 context.Context
		arg2 *v1alpha1.PolicyAssignment
		arg3 []grpc.CallOption
	}{arg1, arg2, arg3})
	stub := fake.UpdatePolicyAssignmentStub
	fakeReturns := fake.updatePolicyAssignmentReturns
	fake.recordInvocation("UpdatePolicyAssignment", []interface{}{arg1, arg2, arg3})
	fake.updatePolicyAssignmentMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRodeClient) UpdatePolicyAssignmentCallCount() int {
	fake.updatePolicyAssignmentMutex.RLock()
	defer fake.updatePolicyAssignmentMutex.RUnlock()
	return len(fake.updatePolicyAssignmentArgsForCall)
}

func (fake *FakeRodeClient) UpdatePolicyAssignmentCalls(stub func(context.Context, *v1alpha1.PolicyAssignment, ...grpc.CallOption) (*v1alpha1.PolicyAssignment, error)) {
	fake.updatePolicyAssignmentMutex.Lock()
	defer fake.updatePolicyAssignmentMutex.Unlock()
	fake.UpdatePolicyAssignmentStub = stub
}

func (fake *FakeRodeClient) UpdatePolicyAssignmentArgsForCall(i int) (context.Context, *v1alpha1.PolicyAssignment, []grpc.CallOption) {
	fake.updatePolicyAssignmentMutex.RLock()
	defer fake.updatePolicyAssignmentMutex.RUnlock()
	argsForCall := fake.updatePolicyAssignmentArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRodeClient) UpdatePolicyAssignmentReturns(result1 *v1alpha1.PolicyAssignment, result2 error) {
	fake.updatePolicyAssignmentMutex.Lock()
	defer fake.updatePolicyAssignmentMutex.Unlock()
	fake.UpdatePolicyAssignmentStub = nil
	fake.updatePolicyAssignmentReturns = struct {
		result1 *v1alpha1.PolicyAssignment
		result2 error
	}{result1, result2}
}

func (fake *FakeRodeClient) UpdatePolicyAssignmentReturnsOnCall(i int, result1 *v1alpha1.PolicyAssignment, result2 error) {
	fake.updatePolicyAssignmentMutex.Lock()
	defer fake.updatePolicyAssignmentMutex.Unlock()
	fake.UpdatePolicyAssignmentStub = nil
	if fake.updatePolicyAssignmentReturnsOnCall == nil {
		fake.updatePolicyAssignmentReturnsOnCall = make(map[int]struct {
			result1 *v1alpha1.PolicyAssignment
			result2 error
		})
	}
	fake.updatePolicyAssignmentReturnsOnCall[i] = struct {
		result1 *v1alpha1.PolicyAssignment
		result2 error
	}{result1, result2}
}

func (fake *FakeRodeClient) UpdatePolicyGroup(arg1 context.Context, arg2 *v1alpha1.PolicyGroup, arg3 ...grpc.CallOption) (*v1alpha1.PolicyGroup, error) {
	fake.updatePolicyGroupMutex.Lock()
	ret, specificReturn := fake.updatePolicyGroupReturnsOnCall[len(fake.updatePolicyGroupArgsForCall)]
	fake.updatePolicyGroupArgsForCall = append(fake.updatePolicyGroupArgsForCall, struct {
		arg1 context.Context
		arg2 *v1alpha1.PolicyGroup
		arg3 []grpc.CallOption
	}{arg1, arg2, arg3})
	stub := fake.UpdatePolicyGroupStub
	fakeReturns := fake.updatePolicyGroupReturns
	fake.recordInvocation("UpdatePolicyGroup", []interface{}{arg1, arg2, arg3})
	fake.updatePolicyGroupMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRodeClient) UpdatePolicyGroupCallCount() int {
	fake.updatePolicyGroupMutex.RLock()
	defer fake.updatePolicyGroupMutex.RUnlock()
	return len(fake.updatePolicyGroupArgsForCall)
}

func (fake *FakeRodeClient) UpdatePolicyGroupCalls(stub func(context.Context, *v1alpha1.PolicyGroup, ...grpc.CallOption) (*v1alpha1.PolicyGroup, error)) {
	fake.updatePolicyGroupMutex.Lock()
	defer fake.updatePolicyGroupMutex.Unlock()
	fake.UpdatePolicyGroupStub = stub
}

func (fake *FakeRodeClient) UpdatePolicyGroupArgsForCall(i int) (context.Context, *v1alpha1.PolicyGroup, []grpc.CallOption) {
	fake.updatePolicyGroupMutex.RLock()
	defer fake.updatePolicyGroupMutex.RUnlock()
	argsForCall := fake.updatePolicyGroupArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRodeClient) UpdatePolicyGroupReturns(result1 *v1alpha1.PolicyGroup, result2 error) {
	fake.updatePolicyGroupMutex.Lock()
	defer fake.updatePolicyGroupMutex.Unlock()
	fake.UpdatePolicyGroupStub = nil
	fake.updatePolicyGroupReturns = struct {
		result1 *v1alpha1.PolicyGroup
		result2 error
	}{result1, result2}
}

func (fake *FakeRodeClient) UpdatePolicyGroupReturnsOnCall(i int, result1 *v1alpha1.PolicyGroup, result2 error) {
	fake.updatePolicyGroupMutex.Lock()
	defer fake.updatePolicyGroupMutex.Unlock()
	fake.UpdatePolicyGroupStub = nil
	if fake.updatePolicyGroupReturnsOnCall == nil {
		fake.updatePolicyGroupReturnsOnCall = make(map[int]struct {
			result1 *v1alpha1.PolicyGroup
			result2 error
		})
	}
	fake.updatePolicyGroupReturnsOnCall[i] = struct {
		result1 *v1alpha1.PolicyGroup
		result2 error
	}{result1, result2}
}

func (fake *FakeRodeClient) ValidatePolicy(arg1 context.Context, arg2 *v1alpha1.ValidatePolicyRequest, arg3 ...grpc.CallOption) (*v1alpha1.ValidatePolicyResponse, error) {
	fake.validatePolicyMutex.Lock()
	ret, specificReturn := fake.validatePolicyReturnsOnCall[len(fake.validatePolicyArgsForCall)]
	fake.validatePolicyArgsForCall = append(fake.validatePolicyArgsForCall, struct {
		arg1 context.Context
		arg2 *v1alpha1.ValidatePolicyRequest
		arg3 []grpc.CallOption
	}{arg1, arg2, arg3})
	stub := fake.ValidatePolicyStub
	fakeReturns := fake.validatePolicyReturns
	fake.recordInvocation("ValidatePolicy", []interface{}{arg1, arg2, arg3})
	fake.validatePolicyMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRodeClient) ValidatePolicyCallCount() int {
	fake.validatePolicyMutex.RLock()
	defer fake.validatePolicyMutex.RUnlock()
	return len(fake.validatePolicyArgsForCall)
}

func (fake *FakeRodeClient) ValidatePolicyCalls(stub func(context.Context, *v1alpha1.ValidatePolicyRequest, ...grpc.CallOption) (*v1alpha1.ValidatePolicyResponse, error)) {
	fake.validatePolicyMutex.Lock()
	defer fake.validatePolicyMutex.Unlock()
	fake.ValidatePolicyStub = stub
}

func (fake *FakeRodeClient) ValidatePolicyArgsForCall(i int) (context.Context, *v1alpha1.ValidatePolicyRequest, []grpc.CallOption) {
	fake.validatePolicyMutex.RLock()
	defer fake.validatePolicyMutex.RUnlock()
	argsForCall := fake.validatePolicyArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRodeClient) ValidatePolicyReturns(result1 *v1alpha1.ValidatePolicyResponse, result2 error) {
	fake.validatePolicyMutex.Lock()
	defer fake.validatePolicyMutex.Unlock()
	fake.ValidatePolicyStub = nil
	fake.validatePolicyReturns = struct {
		result1 *v1alpha1.ValidatePolicyResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeRodeClient) ValidatePolicyReturnsOnCall(i int, result1 *v1alpha1.ValidatePolicyResponse, result2 error) {
	fake.validatePolicyMutex.Lock()
	defer fake.validatePolicyMutex.Unlock()
	fake.ValidatePolicyStub = nil
	if fake.validatePolicyReturnsOnCall == nil {
		fake.validatePolicyReturnsOnCall = make(map[int]struct {
			result1 *v1alpha1.ValidatePolicyResponse
			result2 error
		})
	}
	fake.validatePolicyReturnsOnCall[i] = struct {
		result1 *v1alpha1.ValidatePolicyResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeRodeClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.batchCreateOccurrencesMutex.RLock()
	defer fake.batchCreateOccurrencesMutex.RUnlock()
	fake.createNoteMutex.RLock()
	defer fake.createNoteMutex.RUnlock()
	fake.createPolicyMutex.RLock()
	defer fake.createPolicyMutex.RUnlock()
	fake.createPolicyAssignmentMutex.RLock()
	defer fake.createPolicyAssignmentMutex.RUnlock()
	fake.createPolicyGroupMutex.RLock()
	defer fake.createPolicyGroupMutex.RUnlock()
	fake.deletePolicyMutex.RLock()
	defer fake.deletePolicyMutex.RUnlock()
	fake.deletePolicyAssignmentMutex.RLock()
	defer fake.deletePolicyAssignmentMutex.RUnlock()
	fake.deletePolicyGroupMutex.RLock()
	defer fake.deletePolicyGroupMutex.RUnlock()
	fake.evaluatePolicyMutex.RLock()
	defer fake.evaluatePolicyMutex.RUnlock()
	fake.evaluateResourceMutex.RLock()
	defer fake.evaluateResourceMutex.RUnlock()
	fake.getPolicyMutex.RLock()
	defer fake.getPolicyMutex.RUnlock()
	fake.getPolicyAssignmentMutex.RLock()
	defer fake.getPolicyAssignmentMutex.RUnlock()
	fake.getPolicyGroupMutex.RLock()
	defer fake.getPolicyGroupMutex.RUnlock()
	fake.getResourceEvaluationMutex.RLock()
	defer fake.getResourceEvaluationMutex.RUnlock()
	fake.listOccurrencesMutex.RLock()
	defer fake.listOccurrencesMutex.RUnlock()
	fake.listPoliciesMutex.RLock()
	defer fake.listPoliciesMutex.RUnlock()
	fake.listPolicyAssignmentsMutex.RLock()
	defer fake.listPolicyAssignmentsMutex.RUnlock()
	fake.listPolicyGroupsMutex.RLock()
	defer fake.listPolicyGroupsMutex.RUnlock()
	fake.listPolicyVersionsMutex.RLock()
	defer fake.listPolicyVersionsMutex.RUnlock()
	fake.listResourceEvaluationsMutex.RLock()
	defer fake.listResourceEvaluationsMutex.RUnlock()
	fake.listResourceVersionsMutex.RLock()
	defer fake.listResourceVersionsMutex.RUnlock()
	fake.listResourcesMutex.RLock()
	defer fake.listResourcesMutex.RUnlock()
	fake.listVersionedResourceOccurrencesMutex.RLock()
	defer fake.listVersionedResourceOccurrencesMutex.RUnlock()
	fake.registerCollectorMutex.RLock()
	defer fake.registerCollectorMutex.RUnlock()
	fake.updateOccurrenceMutex.RLock()
	defer fake.updateOccurrenceMutex.RUnlock()
	fake.updatePolicyMutex.RLock()
	defer fake.updatePolicyMutex.RUnlock()
	fake.updatePolicyAssignmentMutex.RLock()
	defer fake.updatePolicyAssignmentMutex.RUnlock()
	fake.updatePolicyGroupMutex.RLock()
	defer fake.updatePolicyGroupMutex.RUnlock()
	fake.validatePolicyMutex.RLock()
	defer fake.validatePolicyMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRodeClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v1alpha1.RodeClient = new(FakeRodeClient)
