// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rode/rode/proto/v1alpha1 (interfaces: RodeClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/rode/rode/proto/v1alpha1"
	grafeas_go_proto "github.com/rode/rode/protodeps/grafeas/proto/v1beta1/grafeas_go_proto"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockRodeClient is a mock of RodeClient interface.
type MockRodeClient struct {
	ctrl     *gomock.Controller
	recorder *MockRodeClientMockRecorder
}

// MockRodeClientMockRecorder is the mock recorder for MockRodeClient.
type MockRodeClientMockRecorder struct {
	mock *MockRodeClient
}

// NewMockRodeClient creates a new mock instance.
func NewMockRodeClient(ctrl *gomock.Controller) *MockRodeClient {
	mock := &MockRodeClient{ctrl: ctrl}
	mock.recorder = &MockRodeClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRodeClient) EXPECT() *MockRodeClientMockRecorder {
	return m.recorder
}

// BatchCreateOccurrences mocks base method.
func (m *MockRodeClient) BatchCreateOccurrences(arg0 context.Context, arg1 *v1alpha1.BatchCreateOccurrencesRequest, arg2 ...grpc.CallOption) (*v1alpha1.BatchCreateOccurrencesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchCreateOccurrences", varargs...)
	ret0, _ := ret[0].(*v1alpha1.BatchCreateOccurrencesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchCreateOccurrences indicates an expected call of BatchCreateOccurrences.
func (mr *MockRodeClientMockRecorder) BatchCreateOccurrences(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchCreateOccurrences", reflect.TypeOf((*MockRodeClient)(nil).BatchCreateOccurrences), varargs...)
}

// CreatePolicy mocks base method.
func (m *MockRodeClient) CreatePolicy(arg0 context.Context, arg1 *v1alpha1.PolicyEntity, arg2 ...grpc.CallOption) (*v1alpha1.Policy, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePolicy", varargs...)
	ret0, _ := ret[0].(*v1alpha1.Policy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePolicy indicates an expected call of CreatePolicy.
func (mr *MockRodeClientMockRecorder) CreatePolicy(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePolicy", reflect.TypeOf((*MockRodeClient)(nil).CreatePolicy), varargs...)
}

// DeletePolicy mocks base method.
func (m *MockRodeClient) DeletePolicy(arg0 context.Context, arg1 *v1alpha1.DeletePolicyRequest, arg2 ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePolicy", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePolicy indicates an expected call of DeletePolicy.
func (mr *MockRodeClientMockRecorder) DeletePolicy(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePolicy", reflect.TypeOf((*MockRodeClient)(nil).DeletePolicy), varargs...)
}

// EvaluatePolicy mocks base method.
func (m *MockRodeClient) EvaluatePolicy(arg0 context.Context, arg1 *v1alpha1.EvaluatePolicyRequest, arg2 ...grpc.CallOption) (*v1alpha1.EvaluatePolicyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EvaluatePolicy", varargs...)
	ret0, _ := ret[0].(*v1alpha1.EvaluatePolicyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EvaluatePolicy indicates an expected call of EvaluatePolicy.
func (mr *MockRodeClientMockRecorder) EvaluatePolicy(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EvaluatePolicy", reflect.TypeOf((*MockRodeClient)(nil).EvaluatePolicy), varargs...)
}

// GetPolicy mocks base method.
func (m *MockRodeClient) GetPolicy(arg0 context.Context, arg1 *v1alpha1.GetPolicyRequest, arg2 ...grpc.CallOption) (*v1alpha1.Policy, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPolicy", varargs...)
	ret0, _ := ret[0].(*v1alpha1.Policy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPolicy indicates an expected call of GetPolicy.
func (mr *MockRodeClientMockRecorder) GetPolicy(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicy", reflect.TypeOf((*MockRodeClient)(nil).GetPolicy), varargs...)
}

// ListGenericResources mocks base method.
func (m *MockRodeClient) ListGenericResources(arg0 context.Context, arg1 *v1alpha1.ListGenericResourcesRequest, arg2 ...grpc.CallOption) (*v1alpha1.ListGenericResourcesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGenericResources", varargs...)
	ret0, _ := ret[0].(*v1alpha1.ListGenericResourcesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGenericResources indicates an expected call of ListGenericResources.
func (mr *MockRodeClientMockRecorder) ListGenericResources(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGenericResources", reflect.TypeOf((*MockRodeClient)(nil).ListGenericResources), varargs...)
}

// ListOccurrences mocks base method.
func (m *MockRodeClient) ListOccurrences(arg0 context.Context, arg1 *v1alpha1.ListOccurrencesRequest, arg2 ...grpc.CallOption) (*v1alpha1.ListOccurrencesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOccurrences", varargs...)
	ret0, _ := ret[0].(*v1alpha1.ListOccurrencesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOccurrences indicates an expected call of ListOccurrences.
func (mr *MockRodeClientMockRecorder) ListOccurrences(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOccurrences", reflect.TypeOf((*MockRodeClient)(nil).ListOccurrences), varargs...)
}

// ListPolicies mocks base method.
func (m *MockRodeClient) ListPolicies(arg0 context.Context, arg1 *v1alpha1.ListPoliciesRequest, arg2 ...grpc.CallOption) (*v1alpha1.ListPoliciesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPolicies", varargs...)
	ret0, _ := ret[0].(*v1alpha1.ListPoliciesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPolicies indicates an expected call of ListPolicies.
func (mr *MockRodeClientMockRecorder) ListPolicies(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPolicies", reflect.TypeOf((*MockRodeClient)(nil).ListPolicies), varargs...)
}

// ListResources mocks base method.
func (m *MockRodeClient) ListResources(arg0 context.Context, arg1 *v1alpha1.ListResourcesRequest, arg2 ...grpc.CallOption) (*v1alpha1.ListResourcesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListResources", varargs...)
	ret0, _ := ret[0].(*v1alpha1.ListResourcesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResources indicates an expected call of ListResources.
func (mr *MockRodeClientMockRecorder) ListResources(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResources", reflect.TypeOf((*MockRodeClient)(nil).ListResources), varargs...)
}

// UpdateOccurrence mocks base method.
func (m *MockRodeClient) UpdateOccurrence(arg0 context.Context, arg1 *v1alpha1.UpdateOccurrenceRequest, arg2 ...grpc.CallOption) (*grafeas_go_proto.Occurrence, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateOccurrence", varargs...)
	ret0, _ := ret[0].(*grafeas_go_proto.Occurrence)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOccurrence indicates an expected call of UpdateOccurrence.
func (mr *MockRodeClientMockRecorder) UpdateOccurrence(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOccurrence", reflect.TypeOf((*MockRodeClient)(nil).UpdateOccurrence), varargs...)
}

// UpdatePolicy mocks base method.
func (m *MockRodeClient) UpdatePolicy(arg0 context.Context, arg1 *v1alpha1.UpdatePolicyRequest, arg2 ...grpc.CallOption) (*v1alpha1.Policy, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePolicy", varargs...)
	ret0, _ := ret[0].(*v1alpha1.Policy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePolicy indicates an expected call of UpdatePolicy.
func (mr *MockRodeClientMockRecorder) UpdatePolicy(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePolicy", reflect.TypeOf((*MockRodeClient)(nil).UpdatePolicy), varargs...)
}

// ValidatePolicy mocks base method.
func (m *MockRodeClient) ValidatePolicy(arg0 context.Context, arg1 *v1alpha1.ValidatePolicyRequest, arg2 ...grpc.CallOption) (*v1alpha1.ValidatePolicyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ValidatePolicy", varargs...)
	ret0, _ := ret[0].(*v1alpha1.ValidatePolicyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidatePolicy indicates an expected call of ValidatePolicy.
func (mr *MockRodeClientMockRecorder) ValidatePolicy(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidatePolicy", reflect.TypeOf((*MockRodeClient)(nil).ValidatePolicy), varargs...)
}
